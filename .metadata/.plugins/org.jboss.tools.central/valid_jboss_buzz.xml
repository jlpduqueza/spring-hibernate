<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Probing golang runtime using SystemTap</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/zxMJ57qGpnQ/" /><category term="Go" /><category term="Performance" /><category term="Golang" /><category term="performance" /><category term="systemtap" /><author><name>Jafeer Uddin</name></author><id>https://developers.redhat.com/blog/?p=612097</id><updated>2019-07-24T07:00:18Z</updated><published>2019-07-24T07:00:18Z</published><content type="html">&lt;p&gt;I recently saw an &lt;a href="https://eng.uber.com/optimizing-m3/"&gt;article from Uber Engineering&lt;/a&gt; describing an issue they were having with an increase in latency. The Uber engineers suspected that their code was running out of stack space causing the golang runtime to issue a stack growth, which would introduce additional latency &lt;span class="author-g-ew4yuqf5p458cil1"&gt;due to memory allocation and copying&lt;/span&gt;. The engineers ended up modifying the golang runtime with additional instrumentation to report these stack growths to confirm their suspicions. This situation is a perfect example of where SystemTap could have been used.&lt;/p&gt; &lt;p&gt;&lt;a href="https://sourceware.org/systemtap/"&gt;SystemTap&lt;/a&gt; is a tool that can be used to perform live analysis of a running program. It is able to interrupt normal control flow and execute code specified by a SystemTap script, which can allow users to temporarily modify a running program without having to change the source and recompile.&lt;span id="more-612097"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;Here is a SystemTap script that can be used to replicate the patch done in the Uber article:&lt;/p&gt; &lt;pre&gt;global printstackgrow probe process(&lt;em&gt;PATH&lt;/em&gt;).statement("runtime.newstack@/usr/lib/golang/src/runtime/stack.go:936") { shouldPrintStack = printstackgrow % 1000 == 0 printstackgrow++ if (shouldPrintStack) { oldSize = $thisg-&amp;#62;m-&amp;#62;curg-&amp;#62;stack-&amp;#62;hi - $thisg-&amp;#62;m-&amp;#62;curg-&amp;#62;stack-&amp;#62;lo newSize = oldSize * 2 printf("runtime: newstack: %d -&amp;#62; %d\n", oldSize, newSize) print_ubacktrace_fileline($thisg-&amp;#62;m-&amp;#62;morebuf-&amp;#62;pc, $thisg-&amp;#62;m-&amp;#62;morebuf-&amp;#62;sp, $thisg-&amp;#62;m-&amp;#62;morebuf-&amp;#62;lr) } } &lt;/pre&gt; &lt;p&gt;This script introduces a probe within the &lt;code&gt;runtime.newstack()&lt;/code&gt; function at line 936 of stack.go (this location will depend on your golang installation) for the executable specified by &lt;em&gt;PATH&lt;/em&gt;. When we reach that point in execution, SystemTap will redirect and execute the code placed within the probe handler shown above. The handler performs the same steps done in the Uber article patch, printing out the change in stack size and a backtrace for every 1000 hits of &lt;code&gt;runtime.newstack()&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Now let&amp;#8217;s see this script in action. I am going to use the following golang example to demonstrate. This program prints out some text and spawns go routines to do the same, just to get to a point where a stack needs to be grown and &lt;code&gt;runtime.newstack()&lt;/code&gt; is called.&lt;/p&gt; &lt;pre&gt;$ cat example.go package main import ( "fmt" "time" ) func say(s string) { for i := 0; i &amp;#60; 5; i++ { time.Sleep(1 * time.Millisecond) fmt.Println(s) } } func main() { go say("world") say("hello") } &lt;/pre&gt; &lt;p&gt;For this demonstration, I will simplify the SystemTap script a little. The sampling code to limit output isn&amp;#8217;t needed, as there won&amp;#8217;t be too much output with the example. Also now we have an actual executable, generated using &lt;code&gt;go build example.go&lt;/code&gt;, which can be used to replace &lt;em&gt;PATH&lt;/em&gt;.&lt;/p&gt; &lt;pre&gt;$ cat newstack.stp probe process("./example").statement("runtime.newstack@/usr/lib/golang/src/runtime/stack.go:936") { oldSize = $thisg-&amp;#62;m-&amp;#62;curg-&amp;#62;stack-&amp;#62;hi - $thisg-&amp;#62;m-&amp;#62;curg-&amp;#62;stack-&amp;#62;lo newSize = oldSize * 2 printf("runtime: newstack: %d -&amp;#62; %d\n", oldSize, newSize) print_ubacktrace_fileline($thisg-&amp;#62;m-&amp;#62;morebuf-&amp;#62;pc, $thisg-&amp;#62;m-&amp;#62;morebuf-&amp;#62;sp, $thisg-&amp;#62;m-&amp;#62;morebuf-&amp;#62;lr) } &lt;/pre&gt; &lt;p&gt;When we run this script, we get:&lt;/p&gt; &lt;pre&gt;$ ls newstack.stp example example.go $ stap newstack.stp &amp;#60;== execute "./example" in another terminal : runtime: newstack: 2048 -&amp;#62; 4096 0x40d748 : runtime.mallocgc+0x548/0x9d0 at /usr/lib/golang/src/runtime/malloc.go:740 [/home/juddin/example] 0x40dd48 : runtime.newobject+0x38/0x60 at /usr/lib/golang/src/runtime/malloc.go:839 [/home/juddin/example] : 0x47c4cb : fmt.Fprintln+0x8b/0x100 at /usr/lib/golang/src/fmt/print.go:255 [/home/juddin/example] 0x47c597 : fmt.Println+0x57/0x90 at /usr/lib/golang/src/fmt/print.go:264 [/home/juddin/example] 0x4827a4 : main.say+0xa4/0xd0 at /home/juddin/example.go:9 [/home/juddin/example] 0x44ecb1 : runtime.goexit+0x1/0x10 at /usr/lib/golang/src/runtime/asm_amd64.s:2362 [/home/juddin/example] &lt;/pre&gt; &lt;p&gt;I have omitted some of the output to make things a little clearer and focused on the points of interest. As can be seen from the backtrace, a stack growth is triggered from &lt;code&gt;main.say()&lt;/code&gt;. So, we are able to determine that our code indeed does cause a stack growth, and we did this without having to modify the target program, never mind the go runtime or compiler.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F24%2Fprobing-golang-runtime-using-systemtap%2F&amp;#38;linkname=Probing%20golang%20runtime%20using%20SystemTap" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F24%2Fprobing-golang-runtime-using-systemtap%2F&amp;#38;linkname=Probing%20golang%20runtime%20using%20SystemTap" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F24%2Fprobing-golang-runtime-using-systemtap%2F&amp;#38;linkname=Probing%20golang%20runtime%20using%20SystemTap" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F24%2Fprobing-golang-runtime-using-systemtap%2F&amp;#38;linkname=Probing%20golang%20runtime%20using%20SystemTap" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F24%2Fprobing-golang-runtime-using-systemtap%2F&amp;#38;linkname=Probing%20golang%20runtime%20using%20SystemTap" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F24%2Fprobing-golang-runtime-using-systemtap%2F&amp;#38;linkname=Probing%20golang%20runtime%20using%20SystemTap" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F24%2Fprobing-golang-runtime-using-systemtap%2F&amp;#38;linkname=Probing%20golang%20runtime%20using%20SystemTap" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F24%2Fprobing-golang-runtime-using-systemtap%2F&amp;#038;title=Probing%20golang%20runtime%20using%20SystemTap" data-a2a-url="https://developers.redhat.com/blog/2019/07/24/probing-golang-runtime-using-systemtap/" data-a2a-title="Probing golang runtime using SystemTap"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/24/probing-golang-runtime-using-systemtap/"&gt;Probing golang runtime using SystemTap&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/zxMJ57qGpnQ" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;I recently saw an article from Uber Engineering describing an issue they were having with an increase in latency. The Uber engineers suspected that their code was running out of stack space causing the golang runtime to issue a stack growth, which would introduce additional latency due to memory allocation and copying. The engineers ended [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/24/probing-golang-runtime-using-systemtap/"&gt;Probing golang runtime using SystemTap&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/07/24/probing-golang-runtime-using-systemtap/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">612097</post-id><dc:creator>Jafeer Uddin</dc:creator><dc:date>2019-07-24T07:00:18Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/07/24/probing-golang-runtime-using-systemtap/</feedburner:origLink></entry><entry><title>The browser wars and the birth of JavaScript</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/7wvyH_0VdWw/" /><category term="JavaScript" /><category term="Open source" /><category term="browser" /><category term="Javascript" /><category term="web development" /><author><name>Doug Tidwell</name></author><id>https://developers.redhat.com/blog/?p=608607</id><updated>2019-07-23T13:30:46Z</updated><published>2019-07-23T13:30:46Z</published><content type="html">&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;&amp;#8220;Any application that can be written in JavaScript will eventually be written in JavaScript.&amp;#8221;&lt;/em&gt; — Atwood&amp;#8217;s Law, stated by Jeff Atwood in a blog post titled &lt;a href="https://blog.codinghorror.com/the-principle-of-least-power/"&gt;&amp;#8220;The Principle of Least Power,&amp;#8221;&lt;/a&gt; July 17, 2007&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;Before anything like an Android device or iPhone existed, desktop computers were the battleground for &lt;a href="https://en.wikipedia.org/wiki/Browser_wars"&gt;the browser wars&lt;/a&gt;. The battle involved billions of dollars invested by a number of companies, all based on the premise that whoever ruled the desktop browser market would own the internet. Today, &lt;a href="https://www.statista.com/statistics/277125/share-of-website-traffic-coming-from-mobile-devices/"&gt;mobile devices account for nearly half of all website traffic.&lt;/a&gt; Back in the 1990s, however, almost all of the action on the web came from desktop machines, and the vast majority of those desktop machines were running some flavor of Microsoft Windows.&lt;/p&gt; &lt;p&gt;In the browser world, the first-mover advantage belonged to Netscape Communications Corporation. They built the Netscape Navigator browser that made the web accessible to millions for the first time. Netscape had more than 80% of the market, but they also had no shortage of competition. IBM had a browser for OS/2. Oracle had the Powerbrowser, a Netscape-compatible product that included something called the Database Markup Language. The real danger to Netscape, of course, came from the company that owned more than 80% of the world&amp;#8217;s desktops: Microsoft.&lt;/p&gt; &lt;p&gt;Strategically, Netscape realized that the web needed to move past static web pages to reach its full potential. Even if they were created dynamically by something like a CGI script on the web server, pages didn&amp;#8217;t change once they arrived in your browser. If you wanted to see even a slightly modified version of a page, you had to send a request back to the server and wait for a response. For all its sophistication, a web browser felt a lot like a dumb terminal attached to a mainframe. What web developers needed was a programming language that would run in the browser, taking advantage of the processing power of the desktop machine to give users a richer experience.&lt;/p&gt; &lt;p&gt;&lt;span id="more-608607"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;So in 1995, hearing footsteps from Redmond, Netscape decided to shoot for the moon and create that language. Netscape CEO Jim Clark had brought in a gifted programmer named Brendan Eich, who arrived with the idea of implementing the programming language Scheme in the browser. Scheme was adored in academia, but didn&amp;#8217;t have much traction in the marketplace. Eich thought it might be a good fit for programming web pages. He later referred to Scheme as &amp;#8220;that beautiful research language I was tempted with.&amp;#8221;&lt;/p&gt; &lt;p&gt;Only there was a complication: Netscape had licensed Java from Sun Microsystems. A commonly held opinion was that Java should be the language of the browser. Unfortunately, Java was too heavy for the slow connections most people had in those days. Developers had to compile their code and then deliver that code to the browser. Good luck if your code needed a different version of Java than the one the user had on their machine. This meant they needed the patience to download a Java Virtual Machine that was 10 MB or more (!) across a connection too slow for many of today&amp;#8217;s users to comprehend. Back then, the web page and whatever non-Java content it contained were probably no more than a couple hundred KB; there was just too much overhead for Java to work.&lt;/p&gt; &lt;p&gt;In contrast, &lt;a href="https://thenewstack.io/brendan-eich-on-creating-javascript-in-10-days-and-what-hed-do-differently-today/"&gt;Eich, Netscape&amp;#8217;s Marc Andreessen, and Sun&amp;#8217;s Bill Joy all agreed that the world needed a BASIC-like language&lt;/a&gt; that would be a good fit for people who didn&amp;#8217;t know what a compiler was. Should anyone creating a web page have to understand what &lt;code&gt;public static void main(String[] args)&lt;/code&gt; means? Eich didn&amp;#8217;t think so.&lt;/p&gt; &lt;p&gt;The decision was made to create a new programming language and to release that new programming language in Netscape Navigator 2.0. That decision was made &lt;strong&gt;Ten. Days. Before. Launch.&lt;/strong&gt; Eich spent those 10 days creating LiveScript, later renamed JavaScript. (As he said years later, &amp;#8220;I didn&amp;#8217;t sleep much.&amp;#8221;) Suddenly, developers could add logic to their web pages. Even better, the language was directly tied into the things web developers wanted to work with, including the Document Object Model (DOM) for a page&amp;#8217;s HTML content and objects like the browser window itself. If you wanted to go through the page&amp;#8217;s document structure and work with it, JavaScript could do that easily. If you wanted to resize or move a window or open a new window altogether, JavaScript could do that easily.&lt;/p&gt; &lt;h2&gt;&lt;code&gt;&amp;#60;!--[if !IE]&amp;#62;&lt;/code&gt;&lt;/h2&gt; &lt;p&gt;On a personal note, a story from the International House of Hubris: in March of 1996, I was in San Francisco for &lt;a href="https://www.latimes.com/archives/la-xpm-1996-03-07-fi-44130-story.html"&gt;the first Netscape Developers Conference&lt;/a&gt;. I don&amp;#8217;t remember the name of the young, &lt;a href="https://www.zegna.us/us-en/home.html"&gt;Zegna&lt;/a&gt;-clad millionaire who said it, but he told the audience that you could write for Netscape Navigator&amp;#8230;and if you wanted the other three percent of the web, you could target Internet Explorer. Much snickering ensued.&lt;/p&gt; &lt;p&gt;&lt;code&gt;&amp;#60;![endif]--&amp;#62;&lt;/code&gt;&lt;/p&gt; &lt;h2&gt;&lt;code&gt;&amp;#60;!--[if IE]&amp;#62;&lt;/code&gt;&lt;/h2&gt; &lt;p&gt;The following week, I stayed in San Francisco to attend the Microsoft Professional Developers Conference, the show where Bill Gates and company finally understood the internet. If you have some time to kill, &lt;a href="https://channel9.msdn.com/Events/PDC/PDC-1996/PDC-1996-Keynote-with-Bill-Gates"&gt;watch Gates&amp;#8217; keynote. Seriously. It changed the world we live in.&lt;/a&gt; The keynote included demos of games, virtual reality, and state-of-the-art web design, all of which look hilarious now. There was also a demo that ended with the Blue Screen of Death in front of thousands of people; however, that doesn&amp;#8217;t seem to be in the archives. (No judgment, we&amp;#8217;re all programmers, we&amp;#8217;ve all been there. Although maybe not in front of thousands of people while our boss, a.k.a. the richest man in the history of money, looked on.)&lt;/p&gt; &lt;p&gt;At the show, Microsoft announced a full-out pivot to make everything in their product line internet-enabled in one way or another. This was an escalation of their ongoing attacks on Netscape&amp;#8217;s business model. In late 1996, &lt;a href="https://www.fastcompany.com/27743/nothing-netscape"&gt;Netscape Navigator still had 80% of the market and a list price of $49&lt;/a&gt;. (Yes, you had to pay money to get a browser. Talk to your grandparents about what it was like back then. Also, ask them about something called &amp;#8220;dialup.&amp;#8221;) Not only was Windows going to contain a free web browser, but Microsoft was giving away a web &lt;em&gt;server&lt;/em&gt; as well. Unfortunately, it turned out Internet Explorer wasn&amp;#8217;t &lt;em&gt;quite&lt;/em&gt; compatible with Netscape and other browsers to come, creating a thorn in the side of every web developer on Earth for the next 15 years or more.&lt;/p&gt; &lt;p&gt;At any rate, I left San Francisco convinced that Netscape had no idea what was about to hit them. I was also convinced that &lt;a href="https://www.virtual-bubblewrap.com"&gt;Virtual Bubble Wrap&lt;/a&gt;, a Flash-based game that ran in Netscape Navigator, was the greatest use of the Internet ever. I believe I was right on both counts.&lt;/p&gt; &lt;p&gt;&lt;code&gt;&amp;#60;![endif]--&amp;#62;&lt;/code&gt;&lt;/p&gt; &lt;h2&gt;The little language that could&lt;/h2&gt; &lt;p&gt;So, why are we still talking about JavaScript 20+ years later? First, it became a hit on the client side. In 1996, if you were a web developer who wanted to write an interactive web page, you had to learn JavaScript. In 2019, if you&amp;#8217;re a web developer who wants to write an interactive web page, you have to learn JavaScript. Innovation didn&amp;#8217;t stop with the first scripted web pages of the mid-90s, however.&lt;/p&gt; &lt;p&gt;JavaScript&amp;#8217;s influence became more apparent as applications like &lt;a href="https://www.google.com/maps/place/Red+Hat+Tower,+Raleigh,+NC+27601/@35.7745506,-78.640112,17z/data=!3m1!4b1!4m5!3m4!1s0x89ac5f73ad02be6d:0x274dbfebac50d01f!8m2!3d35.7745506!4d-78.6379233"&gt;Google Maps&lt;/a&gt; established a whole new level of interactivity. At one time, mapping websites showed you a static view of the world. If you wanted to see another portion of the map (zoom out, zoom in, move north/west/south/east, etc.), you clicked a button and waited for the server to show you a different map. Google Maps, on the other hand, used JavaScript to prefetch other parts of the map that you might want to see. If you scrolled in one direction or another, the map displayed instantly and automatically. Static maps that required a round-trip to the server every time you wanted to move around were quickly abandoned.&lt;/p&gt; &lt;p&gt;JavaScript&amp;#8217;s dominance was cemented by the emergence of &lt;a href="https://nodejs.org/"&gt;Node.js&lt;/a&gt; on the server side. At a minimum, it gave web developers the ability to take their JavaScript skills from the client to the server. Combined with the ability to pass functions as objects (callbacks), Node.js&amp;#8217;s event loop popularized a whole new programming model. Suddenly, you could write a web server in just a few lines of code.&lt;/p&gt; &lt;p&gt;Then, the rise of the &lt;a href="https://www.npmjs.com"&gt;Node Package Manager (npm)&lt;/a&gt; to manage dependencies meant a very small application could leverage other packages to do really sophisticated things. As a self-serving example, &lt;a href="https://github.com/redhat-developer-demos/knative-proxy"&gt;the knative-proxy package&lt;/a&gt; in &lt;a href="https://developers.redhat.com/coderland/serverless/"&gt;the Coderland Compile Driver&lt;/a&gt; needs fewer than 40 lines of code to handle the HTTP POST and OPTIONS verbs. And it took yr author maybe 30 minutes to write.&lt;/p&gt; &lt;p&gt;JavaScript is a simple, unpretentious language that has its fingers in every corner of your life. Turn off JavaScript in your browser and see how much of the web doesn&amp;#8217;t work anymore. (Philosophical arguments as to whether that&amp;#8217;s a good or bad thing are left to the reader.) No matter how or where you use the internet, Brendan Eich&amp;#8217;s 10-day coding spree is the most important sprint in the history of computing. You don&amp;#8217;t have to like JavaScript, but if you make a living developing for the web, you have to learn it.&lt;/p&gt; &lt;p&gt;To learn more, tune in to &lt;a href="https://www.redhat.com/en/command-line-heroes/season-3/creating-javascript"&gt;Command-line Heroes Season 3, Episode 3: Creating JavaScript&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F23%2Fthe-browser-wars-and-the-birth-of-javascript%2F&amp;#38;linkname=The%20browser%20wars%20and%20the%20birth%20of%20JavaScript" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F23%2Fthe-browser-wars-and-the-birth-of-javascript%2F&amp;#38;linkname=The%20browser%20wars%20and%20the%20birth%20of%20JavaScript" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F23%2Fthe-browser-wars-and-the-birth-of-javascript%2F&amp;#38;linkname=The%20browser%20wars%20and%20the%20birth%20of%20JavaScript" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F23%2Fthe-browser-wars-and-the-birth-of-javascript%2F&amp;#38;linkname=The%20browser%20wars%20and%20the%20birth%20of%20JavaScript" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F23%2Fthe-browser-wars-and-the-birth-of-javascript%2F&amp;#38;linkname=The%20browser%20wars%20and%20the%20birth%20of%20JavaScript" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F23%2Fthe-browser-wars-and-the-birth-of-javascript%2F&amp;#38;linkname=The%20browser%20wars%20and%20the%20birth%20of%20JavaScript" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F23%2Fthe-browser-wars-and-the-birth-of-javascript%2F&amp;#38;linkname=The%20browser%20wars%20and%20the%20birth%20of%20JavaScript" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F23%2Fthe-browser-wars-and-the-birth-of-javascript%2F&amp;#038;title=The%20browser%20wars%20and%20the%20birth%20of%20JavaScript" data-a2a-url="https://developers.redhat.com/blog/2019/07/23/the-browser-wars-and-the-birth-of-javascript/" data-a2a-title="The browser wars and the birth of JavaScript"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/23/the-browser-wars-and-the-birth-of-javascript/"&gt;The browser wars and the birth of JavaScript&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/7wvyH_0VdWw" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;&amp;#8220;Any application that can be written in JavaScript will eventually be written in JavaScript.&amp;#8221; — Atwood&amp;#8217;s Law, stated by Jeff Atwood in a blog post titled &amp;#8220;The Principle of Least Power,&amp;#8221; July 17, 2007 Before anything like an Android device or iPhone existed, desktop computers were the battleground for the browser wars. The battle involved billions of [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/23/the-browser-wars-and-the-birth-of-javascript/"&gt;The browser wars and the birth of JavaScript&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/07/23/the-browser-wars-and-the-birth-of-javascript/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">608607</post-id><dc:creator>Doug Tidwell</dc:creator><dc:date>2019-07-23T13:30:46Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/07/23/the-browser-wars-and-the-birth-of-javascript/</feedburner:origLink></entry><entry><title>DevNation Live: Introducing Kogito</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/xNY06T4Ygys/" /><category term="Quarkus" /><category term="GraalVM" /><category term="Kogito" /><author><name>Editorial Team</name></author><id>https://developers.redhat.com/blog/?p=614977</id><updated>2019-07-23T07:00:05Z</updated><published>2019-07-23T07:00:05Z</published><content type="html">&lt;p&gt;&lt;a href="https://developers.redhat.com/devnation/"&gt;DevNation Live tech talks&lt;/a&gt; are hosted by the Red Hat technologists who create our products. These sessions include real solutions and code and sample projects to help you get started. In this talk, you’ll learn about &lt;a href="https://developers.redhat.com/courses/quarkus/"&gt;Quarkus&lt;/a&gt;, &lt;a href="https://quarkus.io/guides/kogito-guide"&gt;Kogito&lt;/a&gt;, and &lt;a href="https://www.graalvm.org/"&gt;GraalVM&lt;/a&gt; from Red Hat&amp;#8217;s &lt;a href="https://developers.redhat.com/blog/author/mfusco/"&gt;Mario Fusco,&lt;/a&gt; Principal Software Engineer, and &lt;a href="https://developers.redhat.com/node/204405/"&gt;Burr Sutter&lt;/a&gt;, Chief Developer Evangelist.&lt;/p&gt; &lt;p&gt;These days rule engines are often overlooked, possibly because people think that they are only useful inside heavyweight enterprise software products. However, this is not necessarily true. Simply put, a rule engine is just a piece of software that allows you to separate domain and business-specific constraints from the main application flow. Drools is the rule engine of Red Hat, and our goal is to make it ready to be used in serverless environments.&lt;/p&gt; &lt;p&gt;This talk will explore and make sense of technologies like GraalVM and Quarkus. We&amp;#8217;ll show what changes are needed in a codebase — making extensive use of reflection, dynamic class loading, and other Java sorceries — to make it compatible with those technologies, and we&amp;#8217;ll demonstrate how this is allowing us to make Drools part of the cloud and serverless revolution.&lt;/p&gt; &lt;p&gt;Watch the complete talk here:&lt;/p&gt; &lt;p&gt;&lt;iframe src="https://www.youtube.com/embed/tLz_aNLuCR0" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h3&gt;&lt;b&gt;Learn more&lt;/b&gt;&lt;/h3&gt; &lt;p&gt;Join us at an upcoming&lt;a href="https://developers.redhat.com/events/"&gt; developer event&lt;/a&gt;, and see our collection of&lt;a href="https://developers.redhat.com/devnation/?page=0"&gt; past DevNation Live tech talks&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F23%2Fdevnation-live-introducing-kogito%2F&amp;#38;linkname=DevNation%20Live%3A%20Introducing%20Kogito" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F23%2Fdevnation-live-introducing-kogito%2F&amp;#38;linkname=DevNation%20Live%3A%20Introducing%20Kogito" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F23%2Fdevnation-live-introducing-kogito%2F&amp;#38;linkname=DevNation%20Live%3A%20Introducing%20Kogito" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F23%2Fdevnation-live-introducing-kogito%2F&amp;#38;linkname=DevNation%20Live%3A%20Introducing%20Kogito" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F23%2Fdevnation-live-introducing-kogito%2F&amp;#38;linkname=DevNation%20Live%3A%20Introducing%20Kogito" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F23%2Fdevnation-live-introducing-kogito%2F&amp;#38;linkname=DevNation%20Live%3A%20Introducing%20Kogito" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F23%2Fdevnation-live-introducing-kogito%2F&amp;#38;linkname=DevNation%20Live%3A%20Introducing%20Kogito" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F23%2Fdevnation-live-introducing-kogito%2F&amp;#038;title=DevNation%20Live%3A%20Introducing%20Kogito" data-a2a-url="https://developers.redhat.com/blog/2019/07/23/devnation-live-introducing-kogito/" data-a2a-title="DevNation Live: Introducing Kogito"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/23/devnation-live-introducing-kogito/"&gt;DevNation Live: Introducing Kogito&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/xNY06T4Ygys" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;DevNation Live tech talks are hosted by the Red Hat technologists who create our products. These sessions include real solutions and code and sample projects to help you get started. In this talk, you’ll learn about Quarkus, Kogito, and GraalVM from Red Hat&amp;#8217;s Mario Fusco, Principal Software Engineer, and Burr Sutter, Chief Developer Evangelist. These [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/23/devnation-live-introducing-kogito/"&gt;DevNation Live: Introducing Kogito&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/07/23/devnation-live-introducing-kogito/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">614977</post-id><dc:creator>Editorial Team</dc:creator><dc:date>2019-07-23T07:00:05Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/07/23/devnation-live-introducing-kogito/</feedburner:origLink></entry><entry><title>Enabling CI/CD for Red Hat Decision Manager on OpenShift</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/2x0k0p9Ms2o/" /><category term="CI/CD" /><category term="OpenShift" /><category term="Red Hat Decision Manager" /><category term="ci/cd" /><category term="decision manager" /><category term="OpenShift Enterprise by Red Hat" /><author><name>chgan</name></author><id>https://developers.redhat.com/blog/?p=608707</id><updated>2019-07-22T07:00:53Z</updated><published>2019-07-22T07:00:53Z</published><content type="html">&lt;p&gt;As part of the microservices adoption journey, there will come a time when an organization starts to implement more and more rules services as part of the total application solution landscape. There could be hundreds of rules services to be managed and deployed at one time, making the job of the application team more challenging and eventually causing delays to the entire production rollout.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/products/red-hat-decision-manager/overview"&gt;Red Hat Decision Manager&lt;/a&gt; (RHDM) is a solution that enables developers and application teams to implement decision services or business rules for their application needs. I will be covering how we can fully utilize the capabilities brought by Red Hat Decision Manager and &lt;a href="http://developers.redhat.com/openshift/"&gt;Red Hat OpenShift&lt;/a&gt; to enable a smooth CI/CD process, in order to have rapid decision services deployment. (This tutorial assumes you already have a good understanding of RHDM and OpenShift.)&lt;span id="more-608707"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;All the steps outlined here can be found &lt;a href="https://github.com/chengkuangan/travel-insurance-rules"&gt;in the demo that I have created in GitHub&lt;/a&gt;. The demo is based on simple travel insurance business rules. If you do not wish to follow the steps here, you can proceed to GitHub to use the scripts to deploy the demo. Please be aware that the GitHub content may change over time as I continue to enhance the demo.&lt;/p&gt; &lt;h2&gt;Overview of architecture&lt;/h2&gt; &lt;p&gt;Let&amp;#8217;s take a quick look at the architecture that we&amp;#8217;ll cover in this article. Bear in mind that this is one of the many possibilities of how you can deploy the RHDM on OpenShift. As you can see from the diagram, Decision Central and Decision Manager are deployed into the DEV environment, while only Decision Manager is deployed into SIT, UAT, and PROD. Decision Central is not needed in those environments because we can easily deploy the changes of decision services in those environments using the CI/CD process.&lt;/p&gt; &lt;a href='https://developers.redhat.com/blog/2019/07/22/enabling-ci-cd-for-red-hat-decision-manager-on-openshift/rhdm-cicd-architecture/'&gt;&lt;img width="2440" height="1616" src="https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-cicd-architecture.png" class="attachment-full size-full" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-cicd-architecture.png 2440w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-cicd-architecture-300x199.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-cicd-architecture-768x509.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-cicd-architecture-1024x678.png 1024w" sizes="(max-width: 2440px) 100vw, 2440px" /&gt;&lt;/a&gt; &lt;p&gt;Rules Designers or Rules Developers access Decision Central in the DEV environment to develop or make changes to the business rules. Changes can be deployed and tested in the kie-server in the DEV environment. When it is decided that the changes are good to go from DEV into the SIT, Jenkins pipelines are used to build the kjar and deploy it into the Decision Server in the SIT environment. A Nexus repository is also configured as maven repo for the kjar and container build.&lt;/p&gt; &lt;p&gt;In this article, to keep the demonstration simple, the changes from Decision Central are pushed directly into the Gogs server. A configured Git Hook will do a curl POST to invoke Jenkins job to build the kjar using pipelines, deploy kjar into Nexus, and then deploy the kjar from Nexus into OpenShift SIT Environment. I believe this is enough to provide a good start for anyone who&amp;#8217;d like to set up a similar environment, even extended to UAT and PROD environments.&lt;/p&gt; &lt;p&gt;In a real-life environment, you may also consider having a separate container repository to store the ready-built golden copy of the container image. That way, you can always refer to this golden container image for deployment to multiple environments including the production environment. One of such container image repository is &lt;a href="https://www.openshift.com/products/quay"&gt;Red Hat Quay&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Preparing our environments on OpenShift&lt;/h2&gt; &lt;p&gt;Before deploying the RHDM, be ensure the RHDM image stream is available on OpenShift. Log in as cluster-admin and validate the imagestreams by running the following commands. If the image streams are not available on OpenShift, please follow &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.3/html/deploying_a_red_hat_decision_manager_authoring_or_managed_server_environment_on_red_hat_openshift_container_platform/dm-openshift-prepare-con#imagestreams-file-install-proc"&gt;these instructions on how to configure it&lt;/a&gt;. You may have a different image streams version tag in your environment; please take note to make the necessary changes in the steps outlined here.&lt;/p&gt; &lt;pre&gt;oc get imagestreamtag -n openshift | grep rhdm73-decisioncentral-openshift oc get imagestreamtag -n openshift | grep rhdm73-kieserver-openshift&lt;/pre&gt; &lt;p&gt;We are creating three OpenShift projects to represent the different environments. In this example, we will create a project called Tools to group the Jenkins, Nexus, and Gogs containers—a separate project each for DM DEV and DM SIT.&lt;/p&gt; &lt;pre&gt;oc new-project rhdm-tools --display-name="Tools" oc new-project rhdm-sit --display-name="DM SIT" oc new-project rhdm-dev --display-name="DM DEV" &lt;/pre&gt; &lt;p&gt;At the later part, when we are using the Jenkins pipelines to deploy the kjar using the kie-server template into SIT environment, this kie-server template will create necessary rolebindings on top of many other OpenShift components. In order for Jenkins to be able to provision kie-server in the SIT environment, we need to ensure the Jenkins has the proper permissions. Run the following commands to create the necessary permissions for Jenkins. You may receive this notification: &lt;em&gt;&amp;#8220;&lt;span class="s1"&gt;Warning: ServiceAccount &amp;#8216;jenkins&amp;#8217; not found,&lt;/span&gt;&amp;#8221; &lt;/em&gt;which can be ignored at the moment.&lt;/p&gt; &lt;pre&gt;oc create role RoleBindingRbacCreate --verb=create --resource=rolebindings.rbac.authorization.k8s.io -n rhdm-sit oc create role RoleBindingCreate --verb=create --resource=rolebindings.authorization.openshift.io -n rhdm-sit oc policy add-role-to-user edit system:serviceaccount:rhdm-tools:jenkins -n rhdm-sit oc policy add-role-to-user edit system:serviceaccount:rhdm-tools:jenkins -n rhdm-sit oc adm policy add-role-to-user RoleBindingRbacCreate system:serviceaccountrhdm-tools:jenkins --role-namespace=rhdm-sit -n rhdm-sit oc adm policy add-role-to-user RoleBindingCreate system:serviceaccount:rhdm-tools:jenkins --role-namespace=rhdm-sit -n rhdm-sit &lt;/pre&gt; &lt;h3&gt;Deploying Gogs container and preparing the demo data&lt;/h3&gt; &lt;p&gt;Next, we are creating the Gogs container in the Tools project.&lt;/p&gt; &lt;pre&gt;oc new-app -f https://raw.githubusercontent.com/chengkuangan/templates/master/gogs-persistent-template.yaml -p SKIP_TLS_VERIFY=true -n rhdm-tools&lt;/pre&gt; &lt;p&gt;Wait for the Gogs container to be ready. Navigate to the Gogs console, create a new user, and perform the next few commands.&lt;/p&gt; &lt;p&gt;We will use the sample project from the &lt;a href="https://github.com/chengkuangan/travel-insurance-rules"&gt;GitHub&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;git clone --bare https://github.com/chengkuangan/travel-insurance-rules.git cd travel-insurance-rules.git&lt;/pre&gt; &lt;p&gt;Create a token so that you can use the token to create the Gogs repo using the command line. Please change the &lt;code&gt;${GOGUSER},  ${GOGSPASSWORD}, ${GOGD_HOSTNAME}&lt;/code&gt; accordingly.&lt;/p&gt; &lt;pre&gt;curl -X POST -H "content-type: application/json" -d '{"name":"sample-token","sha1":"8a4fc41b4868aecdd623b10cb1b64a36c6ee51f3"}' 'http://${GOGSUSER}:${GOGSPASSWORD}@${GOGS_HOSTNAME}/api/v1/users/${GOGSUSER}/tokens' &lt;/pre&gt; &lt;p&gt;Use the token created in the previous step to create the necessary repository. Please change the &lt;code&gt;${GOGUSER},  ${GOGSPASSWORD}, ${GOGD_HOSTNAME}&lt;/code&gt; accordingly.&lt;/p&gt; &lt;pre&gt;curl -H "Content-Type: application/json" -d '{"name": "travel-insurance-rules", "description": "Travel Insurance Rules Demo", "private": false}' -X POST 'http://${GOGSUSER}:${GOGSPASSWORD}@${GOGS_HOSTNAME}/api/v1/user/repos?token=8a4fc41b4868aecdd623b10cb1b64a36c6ee51f3'&lt;/pre&gt; &lt;p&gt;Make sure you are in the local &lt;code&gt;travel-insurance-rules.git&lt;/code&gt; directory. Push the sample codes into the Gogs repository. Please change the &lt;code&gt;${GOGUSER},  ${GOGSPASSWORD}, ${GOGD_HOSTNAME}&lt;/code&gt; accordingly.&lt;/p&gt; &lt;pre&gt;git push --mirror 'http://${GOGSUSER}:${GOGSPASSWORD}@${GOGS_HOSTNAME}/${GOGSUSER}/travel-insurance-rules.git'&lt;/pre&gt; &lt;p&gt;Remove the git directory.&lt;/p&gt; &lt;pre&gt;cd .. rm -rf travel-insurance-rules.git&lt;/pre&gt; &lt;p&gt;Now, we&amp;#8217;ll clone the repository from Gogs repository that we just created, because we need to make some changes for the demo to work. You can just head directly to the Gogs console to do this; however, I find using commands is better. Please change the &lt;code&gt;${GOGUSER},  ${GOGSPASSWORD}, ${GOGD_HOSTNAME}&lt;/code&gt;, &lt;code&gt;${PROJECTNAME}&lt;/code&gt; accordingly. Here, &lt;code&gt;${PROJECTNAME}&lt;/code&gt; refers to the project where the Nexus is deployed, e.g., &lt;code&gt;rhdm-tools&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;git clone http://${GOGS_HOSTNAME}/${GOGSUSER}/travel-insurance-rules.git cd travel-insurance-rules sed -i -e "s/http:\/\/nexus3.demo1-tools.svc.cluster.local/http:\/\/nexus3.${PROJECTNAME}.svc.cluster.local/g" ./Jenkinsfile sed -i -e "s/http:\/\/nexus3.demo1-tools.svc.cluster.local/http:\/\/nexus3.${PROJECTNAME}.svc.cluster.local/g" ./openshift-nexus-settings.xml git add . git commit -m "Updated Jenkinsfile" git push 'http://${GOGSUSER}:${GOGSPASSWORD}@${GOGS_HOSTNAME}/${GOGSUSER}/travel-insurance-rules.git' cd .. rm -rf travel-insurance-rules&lt;/pre&gt; &lt;a href='https://developers.redhat.com/blog/2019/07/22/enabling-ci-cd-for-red-hat-decision-manager-on-openshift/rhdm-gogs-repo-3/'&gt;&lt;img width="2364" height="1760" src="https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-gogs-repo-2.png" class="attachment-full size-full" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-gogs-repo-2.png 2364w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-gogs-repo-2-300x223.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-gogs-repo-2-768x572.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-gogs-repo-2-1024x762.png 1024w" sizes="(max-width: 2364px) 100vw, 2364px" /&gt;&lt;/a&gt; &lt;h3 id="pzgzoBT"&gt;Provisioning Nexus 3&lt;/h3&gt; &lt;p&gt;The next step is to deploy the Nexus container.&lt;/p&gt; &lt;pre&gt;oc new-app -f https://raw.githubusercontent.com/chengkuangan/templates/master/nexus3-persistent-templates.yaml -n rhdm-tools&lt;/pre&gt; &lt;p&gt;Wait for the Nexus container to be ready, which will take some time. Run the following command to create the necessary repo in the Nexus. Please replace the &lt;code&gt;${NEXUS_HOSTNAME}&lt;/code&gt; accordingly, e.g., http://nexus3-rhdm-tools.apps.ocp.demo.com.&lt;/p&gt; &lt;pre&gt;curl -o /tmp/nexus-functions -s https://raw.githubusercontent.com/chengkuangan/scripts/master/configure_nexus3_repo.sh; source /tmp/nexus-functions admin admin123 http://${NEXUS_HOSTNAME}&lt;/pre&gt; &lt;a href='https://developers.redhat.com/blog/2019/07/22/enabling-ci-cd-for-red-hat-decision-manager-on-openshift/rhdm-nexus-repos/'&gt;&lt;img width="1776" height="950" src="https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-nexus-repos.png" class="attachment-full size-full" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-nexus-repos.png 1776w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-nexus-repos-300x160.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-nexus-repos-768x411.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-nexus-repos-1024x548.png 1024w" sizes="(max-width: 1776px) 100vw, 1776px" /&gt;&lt;/a&gt; &lt;h3&gt;Provision Jenkins&lt;/h3&gt; &lt;p&gt;Next, deploy the Jenkins container.&lt;/p&gt; &lt;pre&gt;oc new-app jenkins-persistent -n rhdm-tools&lt;/pre&gt; &lt;p&gt;Wait for the container to be ready. Then, log in to Jenkins with OpenShift user and accept the default permission prompt. Once you are in, create a new token and take note of this token; we will be using it in the next command to create the Jenkins job. Keep this token safe as you will not be able to retrieve it from Jenkins again.&lt;/p&gt; &lt;a href='https://developers.redhat.com/blog/2019/07/22/enabling-ci-cd-for-red-hat-decision-manager-on-openshift/rhdm-jenkins-token/'&gt;&lt;img width="2062" height="470" src="https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-jenkins-token.png" class="attachment-full size-full" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-jenkins-token.png 2062w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-jenkins-token-300x68.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-jenkins-token-768x175.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-jenkins-token-1024x233.png 1024w" sizes="(max-width: 2062px) 100vw, 2062px" /&gt;&lt;/a&gt; &lt;p&gt;Run the following commands to create a Jenkins job and populate the correct settings. Remember to use the correct values according to your environment for &lt;code&gt;${PROJECTNAME}, ${DOMAIN_NAME}, ${GOGUSER}, ${JENKINS_USERNAME}, ${JENKINS_TOKEN}&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;curl -k https://jenkins-${PROJECTNAME}.${DOMAIN_NAME}/jnlpJars/jenkins-cli.jar --output /tmp/jenkins-cli.jar curl -k https://raw.githubusercontent.com/chengkuangan/travel-insurance-rules/master/templates/jenkins-job.xml --output /tmp/jenkins-job-work.xml sed -i -e "s/https:\/\/github.com\/chengkuangan\/travel-insurance-rules.git/http:\/\/gogs:3000\/${GOGSUSER}\/travel-insurance-rules.git/g" /tmp/jenkins-job-work.xml java -jar /tmp/jenkins-cli.jar -s https://jenkins-${PROJECTNAME}.${DOMAIN_NAME}/ -noCertificateCheck -auth ${JENKINS_USERNAME}:${JENKINS_TOKEN}  create-job travel-insurance-rules &amp;#60; /tmp/jenkins-job-work.xml &lt;/pre&gt; &lt;a href='https://developers.redhat.com/blog/2019/07/22/enabling-ci-cd-for-red-hat-decision-manager-on-openshift/rhdm-jenkins-job/'&gt;&lt;img width="1656" height="766" src="https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-jenkins-job.png" class="attachment-full size-full" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-jenkins-job.png 1656w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-jenkins-job-300x139.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-jenkins-job-768x355.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-jenkins-job-1024x474.png 1024w" sizes="(max-width: 1656px) 100vw, 1656px" /&gt;&lt;/a&gt; &lt;h3&gt;Deploying kie-server and Decision Central in DEV environment&lt;/h3&gt; &lt;p&gt;Create the keystore required to deploy the kie-server and Decision Central. To make this tutorial simple, I am using one keystore for both kie-server and Decision Central. For production, it is recommended to use a separate keystore and more secure password.&lt;/p&gt; &lt;pre&gt;keytool -genkeypair -alias jboss -keyalg RSA -keystore ./keystore.jks -storepass mykeystorepass --dname 'CN=demo1,OU=Demo,O=ocp.demo.com,L=KL,S=KL,C=MY'&lt;/pre&gt; &lt;p&gt;Create the secrets for kie-server and Decision Central.&lt;/p&gt; &lt;pre&gt;oc create secret generic kieserver-app-secret --from-file=./keystore.jks -n rhdm-dev oc create secret generic decisioncentral-app-secret --from-file=./keystore.jks -n rhdm-dev&lt;/pre&gt; &lt;p&gt;Deploy the kie-server and Decision Central using the authoring templates. You can obtain the template from the &lt;a href="https://access.redhat.com/downloads"&gt;Red Hat Product download site&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Note that I also pass in the &lt;code&gt;GIT_HOOKS_DIR&lt;/code&gt; parameter at the &lt;code&gt;oc new-app&lt;/code&gt; command. This denotes the directory for the Git hook that we are going to create later to make sure whenever changes made to Decision Central project files will be pushed automatically to Gogs repo. Remember to replace the value for &lt;code&gt;$KIESERVER_KEYSTORE_PASSWORD&lt;/code&gt; and &lt;code&gt;$PROJ_DM_DEV_NAME&lt;/code&gt; at the command-line parameter.&lt;/p&gt; &lt;pre&gt;oc new-app -f https://raw.githubusercontent.com/chengkuangan/travel-insurance-rules/master/templates/rhdm73-authoring.yaml -p DECISION_CENTRAL_HTTPS_SECRET=decisioncentral-app-secret -p KIE_SERVER_HTTPS_SECRET=kieserver-app-secret -p DECISION_CENTRAL_HTTPS_PASSWORD=$KIESERVER_KEYSTORE_PASSWORD -p KIE_SERVER_HTTPS_PASSWORD=$KIESERVER_KEYSTORE_PASSWORD -p APPLICATION_NAME=dmanager -p IMAGE_STREAM_TAG=1.1 -p GIT_HOOKS_DIR=/opt/eap/standalone/data/kie/hooks&lt;em&gt; -n $PROJ_DM_DEV_NAME&lt;/em&gt;&lt;/pre&gt; &lt;a href='https://developers.redhat.com/blog/2019/07/22/enabling-ci-cd-for-red-hat-decision-manager-on-openshift/rhdm-dev-containers/'&gt;&lt;img width="3202" height="648" src="https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-dev-containers.png" class="attachment-full size-full" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-dev-containers.png 3202w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-dev-containers-300x61.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-dev-containers-768x155.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-dev-containers-1024x207.png 1024w" sizes="(max-width: 3202px) 100vw, 3202px" /&gt;&lt;/a&gt; &lt;p&gt;You may noticed that I have a persistent volume created using the template. This is not default in the RHDM authoring template that is downloaded from the Red Hat website. This is required and useful when we import and create ssh keys, ssh &lt;code&gt;config&lt;/code&gt;, and ssh &lt;code&gt;known_hosts&lt;/code&gt; files into the Decision Central POD later.&lt;/p&gt; &lt;a href='https://developers.redhat.com/blog/2019/07/22/enabling-ci-cd-for-red-hat-decision-manager-on-openshift/rhdm-dc-pv-ssh/'&gt;&lt;img width="1018" height="308" src="https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-dc-pv-ssh.png" class="attachment-full size-full" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-dc-pv-ssh.png 1018w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-dc-pv-ssh-300x91.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-dc-pv-ssh-768x232.png 768w" sizes="(max-width: 1018px) 100vw, 1018px" /&gt;&lt;/a&gt; &lt;h2&gt;Complete the CI/CD process&lt;/h2&gt; &lt;h3&gt;Configure Gogs&lt;/h3&gt; &lt;p&gt;For demonstration purposes, I will just configure the post-receive Git hook at Gogs repo settings.  It is just a simple curl POST to the Jenkins job to start the Jenkins build whenever there is a code change in the Gogs repository, submitted by Decision Central. In real-life environment, you may want to do a more complete script to call the Jenkins job build based on different situation, or you may want to just use the built-in Webhooks.&lt;/p&gt; &lt;p&gt;The following is the curl command used in &lt;code&gt;post-receive&lt;/code&gt; Git hook. Notice that this is the same Jenkins user that we used earlier with the created token. Replace the Jenkins hostname as needed for your actual environment. Change the user and token according to your environment.&lt;/p&gt; &lt;pre&gt;#!/bin/bash curl -k -X POST --user demo1-admin-edit-view:&amp;#60;token&amp;#62; https://jenkins-demo1-tools.apps.3.1.190.191.nip.io/job/travel-insurance-rules/build&lt;/pre&gt; &lt;a href='https://developers.redhat.com/blog/2019/07/22/enabling-ci-cd-for-red-hat-decision-manager-on-openshift/rhdm-gogs-githook/'&gt;&lt;img width="2336" height="1336" src="https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-gogs-githook.png" class="attachment-full size-full" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-gogs-githook.png 2336w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-gogs-githook-300x172.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-gogs-githook-768x439.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-gogs-githook-1024x586.png 1024w" sizes="(max-width: 2336px) 100vw, 2336px" /&gt;&lt;/a&gt; &lt;p&gt;Create an ssh key with the following command and ensure the email is matching the email from the Gogs user. Use an empty password. Then, add the public key (id_rsa.pub) into Gogs. Remember to create these keys on a different directory to avoid overwriting your existing keys.&lt;/p&gt; &lt;pre&gt;ssh-keygen -t rsa -C "myeamil@email.com" -N ""&lt;/pre&gt; &lt;a href='https://developers.redhat.com/blog/2019/07/22/enabling-ci-cd-for-red-hat-decision-manager-on-openshift/rhdm-gogs-sshkeys/'&gt;&lt;img width="2364" height="1502" src="https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-gogs-sshkeys.png" class="attachment-full size-full" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-gogs-sshkeys.png 2364w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-gogs-sshkeys-300x191.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-gogs-sshkeys-768x488.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-gogs-sshkeys-1024x651.png 1024w" sizes="(max-width: 2364px) 100vw, 2364px" /&gt;&lt;/a&gt; &lt;h3&gt;Configure Decision Central&lt;/h3&gt; &lt;p&gt;For Decision Central to be able to pull and push project changes to Gogs, we need to transfer the private key (&lt;code&gt;id_rsa&lt;/code&gt;) created earlier,  ssh &lt;code&gt;config&lt;/code&gt; file and create an ssh &lt;code&gt;known_hosts&lt;/code&gt; file in the container&amp;#8217;s &lt;code&gt;/home/jboss/.ssh&lt;/code&gt; directory. With the PV that we created earlier using the modified RHDM authoring templates, this allows write access to known_hosts file, and persistency of these ssh related files.&lt;/p&gt; &lt;p&gt;Next, &lt;code&gt;oc rsh&lt;/code&gt; into the Decision Central container to create file &lt;code&gt;/home/jboss/.ssh/config&lt;/code&gt; with the following content (with 644 file permission). Make sure the host and hostname match the svc for the NodePort that we created earlier. Replace the other values to match your own environment. You can create this file outside the POD and use the &lt;code&gt;oc cp&lt;/code&gt; command to copy it into the POD.&lt;/p&gt; &lt;pre&gt;Host gogs-ssh.demo1-tools.svc.cluster.local Hostname gogs-ssh.demo1-tools.svc.cluster.local User demo1 Port 1025 IdentityFile ~/.ssh/id_rsa&lt;/pre&gt; &lt;a href='https://developers.redhat.com/blog/2019/07/22/enabling-ci-cd-for-red-hat-decision-manager-on-openshift/rhdm-gogs-ssh-nodeport/'&gt;&lt;img width="300" height="92" src="https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-gogs-ssh-nodeport-300x92.png" class="attachment-medium size-medium" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-gogs-ssh-nodeport-300x92.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-gogs-ssh-nodeport-768x235.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-gogs-ssh-nodeport-1024x314.png 1024w" sizes="(max-width: 300px) 100vw, 300px" /&gt;&lt;/a&gt; &lt;p&gt;Copy the ssh private key (id_rsa) file into &lt;code&gt;/home/jboss/.ssh&lt;/code&gt;, make sure it has file permission 600. You can use &lt;code&gt;oc cp&lt;/code&gt; command to do this.&lt;/p&gt; &lt;p&gt;Create an empty &lt;code&gt;known_hosts&lt;/code&gt; by running the following command in the POD. You can also use the &lt;code&gt;oc exec&lt;/code&gt; command to do this.&lt;/p&gt; &lt;pre&gt;touch /home/jboss/.ssh/known_hosts&lt;/pre&gt; &lt;p&gt;Next, &lt;code&gt;oc rsh&lt;/code&gt; into the Decision Central POD and test the ssh connection to Gogs with the following command. You will be prompted to accept and trust the hostname. It is&lt;em&gt; important&lt;/em&gt; to do this; otherwise, when you modified the project files on Decision Central console, the attempt to save the changes will fail at the backend with the error message &lt;em&gt;&amp;#8220;Host key verification failed&amp;#8221;&lt;/em&gt; thrown at Decision Central server logs.&lt;/p&gt; &lt;pre&gt;ssh -vT gogs-ssh.rhdm-tools.svc.cluster.local&lt;/pre&gt; &lt;p&gt;Navigate into &lt;code&gt;/opt/eap/standalone/data/kie/hooks&lt;/code&gt;. Create a file named &lt;code&gt;post-commit&lt;/code&gt; with 755 file permission. The &lt;code&gt;post-commit&lt;/code&gt; file contains only one line as per the following. The location of this file is the parameter that we used for &lt;code&gt;GIT_HOOKS_DIR&lt;/code&gt; when we created the containers using the RHDM authoring templates.&lt;/p&gt; &lt;pre&gt;git push&lt;/pre&gt; &lt;p&gt;Because we did not change the default adminUser and password in the templates, we need to navigate to the Decision Manager deployment config to retrieve the generated adminUser and password.&lt;/p&gt; &lt;a href='https://developers.redhat.com/blog/2019/07/22/enabling-ci-cd-for-red-hat-decision-manager-on-openshift/rhdm-dc-admin-user/'&gt;&lt;img width="1586" height="616" src="https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-dc-admin-user.png" class="attachment-full size-full" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-dc-admin-user.png 1586w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-dc-admin-user-300x117.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-dc-admin-user-768x298.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-dc-admin-user-1024x398.png 1024w" sizes="(max-width: 1586px) 100vw, 1586px" /&gt;&lt;/a&gt; &lt;p&gt;Log in into the Decision Central using the adminUser and import the project source code from the Gogs repository into Decision Central. Make sure it is the correct Gogs ssh URL, and note that we are using the internal svc hostname with port 1025.&lt;/p&gt; &lt;a href='https://developers.redhat.com/blog/2019/07/22/enabling-ci-cd-for-red-hat-decision-manager-on-openshift/rhdm-import-project-from-gogs-2/'&gt;&lt;img width="1200" height="492" src="https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-import-project-from-gogs-1.png" class="attachment-full size-full" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-import-project-from-gogs-1.png 1200w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-import-project-from-gogs-1-300x123.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-import-project-from-gogs-1-768x315.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-import-project-from-gogs-1-1024x420.png 1024w" sizes="(max-width: 1200px) 100vw, 1200px" /&gt;&lt;/a&gt; &lt;p&gt;Now, try to make changes on one of the project files. If the integration works, you will see the changes being pushed into Gogs, and the Jenkins job will be started right after. Do note that the first Jenkins build will take longer.&lt;/p&gt; &lt;a href='https://developers.redhat.com/blog/2019/07/22/enabling-ci-cd-for-red-hat-decision-manager-on-openshift/rhdm-dc-project-artifacts/'&gt;&lt;img width="3346" height="1660" src="https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-dc-project-artifacts.png" class="attachment-full size-full" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-dc-project-artifacts.png 3346w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-dc-project-artifacts-300x149.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-dc-project-artifacts-768x381.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-dc-project-artifacts-1024x508.png 1024w" sizes="(max-width: 3346px) 100vw, 3346px" /&gt;&lt;/a&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;a href='https://developers.redhat.com/blog/2019/07/22/enabling-ci-cd-for-red-hat-decision-manager-on-openshift/rhdm-jenkins-builds/'&gt;&lt;img width="2488" height="1128" src="https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-jenkins-builds.png" class="attachment-full size-full" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-jenkins-builds.png 2488w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-jenkins-builds-300x136.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-jenkins-builds-768x348.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/rhdm-jenkins-builds-1024x464.png 1024w" sizes="(max-width: 2488px) 100vw, 2488px" /&gt;&lt;/a&gt; &lt;p&gt;As you have noticed, there is a kie-server deployed in the DEV environment. In your actual environment, you may want to deploy your decision services into the kie-server in DEV first. Ensure it is working before you deploy into SIT environment. With the know-how from this article, you can change the process when and where to suit your environment.&lt;/p&gt; &lt;h2&gt;What can you do next?&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;Apply the same approach for your UAT environment.&lt;/li&gt; &lt;li&gt;Introduce a container image repository into your environment to minimize the need for frequent decision service build when you need to deploy the same decision services into multiple environments. You may consider Red Hat Quay or other equivalent repositories such as Nexus for this.&lt;/li&gt; &lt;li&gt;Introduce blue-green deployment to minimize the decision service deployment downtime.&lt;/li&gt; &lt;li&gt;Introduce a governance process as part of your DevOps journey.&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;References&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://github.com/chengkuangan/travel-insurance-rules"&gt;A complete Decision Service sample project used in this tutorial&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.3/html/deploying_a_red_hat_decision_manager_authoring_or_managed_server_environment_on_red_hat_openshift_container_platform/dm-openshift-prepare-con#imagestreams-file-install-proc"&gt;How to enable the require image streams on OpenShift&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.3/html/deploying_a_red_hat_decision_manager_authoring_or_managed_server_environment_on_red_hat_openshift_container_platform/"&gt;A complete guide on deploying RHDM on OpenShift&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;Read more&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://blog.openshift.com/deploying-jenkins-on-openshift-part-1/"&gt;Deploying Jenkins on OpenShift: Part 1&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://blog.openshift.com/cloud-native-ci-cd-with-openshift-pipelines/"&gt;Cloud-Native CI/CD with OpenShift Pipelines&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F22%2Fenabling-ci-cd-for-red-hat-decision-manager-on-openshift%2F&amp;#38;linkname=Enabling%20CI%2FCD%20for%20Red%20Hat%20Decision%20Manager%20on%20OpenShift" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F22%2Fenabling-ci-cd-for-red-hat-decision-manager-on-openshift%2F&amp;#38;linkname=Enabling%20CI%2FCD%20for%20Red%20Hat%20Decision%20Manager%20on%20OpenShift" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F22%2Fenabling-ci-cd-for-red-hat-decision-manager-on-openshift%2F&amp;#38;linkname=Enabling%20CI%2FCD%20for%20Red%20Hat%20Decision%20Manager%20on%20OpenShift" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F22%2Fenabling-ci-cd-for-red-hat-decision-manager-on-openshift%2F&amp;#38;linkname=Enabling%20CI%2FCD%20for%20Red%20Hat%20Decision%20Manager%20on%20OpenShift" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F22%2Fenabling-ci-cd-for-red-hat-decision-manager-on-openshift%2F&amp;#38;linkname=Enabling%20CI%2FCD%20for%20Red%20Hat%20Decision%20Manager%20on%20OpenShift" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F22%2Fenabling-ci-cd-for-red-hat-decision-manager-on-openshift%2F&amp;#38;linkname=Enabling%20CI%2FCD%20for%20Red%20Hat%20Decision%20Manager%20on%20OpenShift" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F22%2Fenabling-ci-cd-for-red-hat-decision-manager-on-openshift%2F&amp;#38;linkname=Enabling%20CI%2FCD%20for%20Red%20Hat%20Decision%20Manager%20on%20OpenShift" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F22%2Fenabling-ci-cd-for-red-hat-decision-manager-on-openshift%2F&amp;#038;title=Enabling%20CI%2FCD%20for%20Red%20Hat%20Decision%20Manager%20on%20OpenShift" data-a2a-url="https://developers.redhat.com/blog/2019/07/22/enabling-ci-cd-for-red-hat-decision-manager-on-openshift/" data-a2a-title="Enabling CI/CD for Red Hat Decision Manager on OpenShift"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/22/enabling-ci-cd-for-red-hat-decision-manager-on-openshift/"&gt;Enabling CI/CD for Red Hat Decision Manager on OpenShift&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/2x0k0p9Ms2o" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;As part of the microservices adoption journey, there will come a time when an organization starts to implement more and more rules services as part of the total application solution landscape. There could be hundreds of rules services to be managed and deployed at one time, making the job of the application team more challenging [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/22/enabling-ci-cd-for-red-hat-decision-manager-on-openshift/"&gt;Enabling CI/CD for Red Hat Decision Manager on OpenShift&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/07/22/enabling-ci-cd-for-red-hat-decision-manager-on-openshift/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">608707</post-id><dc:creator>chgan</dc:creator><dc:date>2019-07-22T07:00:53Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/07/22/enabling-ci-cd-for-red-hat-decision-manager-on-openshift/</feedburner:origLink></entry><entry><title>How to build cloud-native CI/CD pipelines with Tekton on Kubernetes</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/ZKcCZr2BJC0/" /><category term="CI/CD" /><category term="Kubernetes" /><category term="OpenShift" /><category term="Tekton" /><category term="kubernetes" /><category term="Red Hat OpenShift" /><author><name>Editorial Team</name></author><id>https://developers.redhat.com/blog/?p=612017</id><updated>2019-07-22T06:59:08Z</updated><published>2019-07-22T06:59:08Z</published><content type="html">&lt;p&gt;Red Hat developer Nikhil Thomas recently presented &amp;#8220;How to Build Cloud-Native CI/CD Pipelines With Tekton on Kubernetes&amp;#8221; at the &lt;a href="https://www.lfasiallc.com/events/kubecon-cloudnativecon-china-2019/"&gt;KubeCon China 2019&lt;/a&gt; co-located Continuous Delivery Summit.&lt;/p&gt; &lt;p&gt;&lt;span id="more-612017"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;In this conference session, Nikhil introduces his app and the associated CI/CD pipeline, then shows how &lt;a href="https://cloud.google.com/tekton/"&gt;Tekton&lt;/a&gt; and &lt;a href="https://developers.redhat.com/openshift/"&gt;Red Hat OpenShift&lt;/a&gt; pipeline help support this process. In the video below, you can watch Nikhil work on the command line in real time.&lt;/p&gt; &lt;p&gt;&lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/-ji5Z0qJmJs?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;&lt;a href="https://drive.google.com/open?id=1TSkwHm57kmTaCYU7L-tCkfKJD9iX1Kvh"&gt;Download the slides here.&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F22%2Fhow-to-build-cloud-native-ci-cd-pipelines-with-tekton-on-kubernetes%2F&amp;#38;linkname=How%20to%20build%20cloud-native%20CI%2FCD%20pipelines%20with%20Tekton%20on%20Kubernetes" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F22%2Fhow-to-build-cloud-native-ci-cd-pipelines-with-tekton-on-kubernetes%2F&amp;#38;linkname=How%20to%20build%20cloud-native%20CI%2FCD%20pipelines%20with%20Tekton%20on%20Kubernetes" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F22%2Fhow-to-build-cloud-native-ci-cd-pipelines-with-tekton-on-kubernetes%2F&amp;#38;linkname=How%20to%20build%20cloud-native%20CI%2FCD%20pipelines%20with%20Tekton%20on%20Kubernetes" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F22%2Fhow-to-build-cloud-native-ci-cd-pipelines-with-tekton-on-kubernetes%2F&amp;#38;linkname=How%20to%20build%20cloud-native%20CI%2FCD%20pipelines%20with%20Tekton%20on%20Kubernetes" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F22%2Fhow-to-build-cloud-native-ci-cd-pipelines-with-tekton-on-kubernetes%2F&amp;#38;linkname=How%20to%20build%20cloud-native%20CI%2FCD%20pipelines%20with%20Tekton%20on%20Kubernetes" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F22%2Fhow-to-build-cloud-native-ci-cd-pipelines-with-tekton-on-kubernetes%2F&amp;#38;linkname=How%20to%20build%20cloud-native%20CI%2FCD%20pipelines%20with%20Tekton%20on%20Kubernetes" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F22%2Fhow-to-build-cloud-native-ci-cd-pipelines-with-tekton-on-kubernetes%2F&amp;#38;linkname=How%20to%20build%20cloud-native%20CI%2FCD%20pipelines%20with%20Tekton%20on%20Kubernetes" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F22%2Fhow-to-build-cloud-native-ci-cd-pipelines-with-tekton-on-kubernetes%2F&amp;#038;title=How%20to%20build%20cloud-native%20CI%2FCD%20pipelines%20with%20Tekton%20on%20Kubernetes" data-a2a-url="https://developers.redhat.com/blog/2019/07/22/how-to-build-cloud-native-ci-cd-pipelines-with-tekton-on-kubernetes/" data-a2a-title="How to build cloud-native CI/CD pipelines with Tekton on Kubernetes"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/22/how-to-build-cloud-native-ci-cd-pipelines-with-tekton-on-kubernetes/"&gt;How to build cloud-native CI/CD pipelines with Tekton on Kubernetes&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/ZKcCZr2BJC0" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Red Hat developer Nikhil Thomas recently presented &amp;#8220;How to Build Cloud-Native CI/CD Pipelines With Tekton on Kubernetes&amp;#8221; at the KubeCon China 2019 co-located Continuous Delivery Summit. In this conference session, Nikhil introduces his app and the associated CI/CD pipeline, then shows how Tekton and Red Hat OpenShift pipeline help support this process. In the video [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/22/how-to-build-cloud-native-ci-cd-pipelines-with-tekton-on-kubernetes/"&gt;How to build cloud-native CI/CD pipelines with Tekton on Kubernetes&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/07/22/how-to-build-cloud-native-ci-cd-pipelines-with-tekton-on-kubernetes/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">612017</post-id><dc:creator>Editorial Team</dc:creator><dc:date>2019-07-22T06:59:08Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/07/22/how-to-build-cloud-native-ci-cd-pipelines-with-tekton-on-kubernetes/</feedburner:origLink></entry><entry><title>Beginners Guide - Building an Online Retail Web Shop Workshop (Guided Rules)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/lHYvcCVvXis/beginners-guide-building-an-online-retail-web-shop-workshop-guided-rules.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="Automate" scheme="searchisko:content:tags" /><category term="Decision Manager" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="workshops" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-beginners_guide_building_an_online_retail_web_shop_workshop_guided_rules</id><updated>2019-07-22T05:00:01Z</updated><published>2019-07-22T05:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://bpmworkshop.gitlab.io/rhdm/lab01.html" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;" target="_blank"&gt;&lt;img alt="beginners guide red hat decision manager" border="0" data-original-height="843" data-original-width="1600" height="168" src="https://1.bp.blogspot.com/-cR3PsiJzOsk/XQuCt-IFI6I/AAAAAAAAvKM/NeGXvos8ok845AeXO5Dv-7LHFOwkWBOUgCLcBGAs/s320/Screenshot%2B2019-06-20%2Bat%2B14.49.30.png" title="" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;With the release of Red Hat Decision Manager 7.3 I've started updating my free online workshop, a beginners guide to building an online retail web shop.&lt;br /&gt;&lt;br /&gt;The previous article covered &lt;a href="https://www.schabell.org/2019/07/beginners-guide-building-an-online-retail-web-shop-workshop-domain-specific-language.html" target="_blank"&gt;creating a domain specific language or DSL for your online retail web shop.&lt;/a&gt;. This update is the for the fifth lab in this workshop, with more to follow. Learn how to&amp;nbsp;create guided rules with Red Hat Decision Manager.&lt;br /&gt;&lt;br /&gt;Below you'll find the embedded lab slides with all the instructions you need.&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Create a domain model&lt;/h3&gt;In&amp;nbsp;&lt;a href="https://bpmworkshop.gitlab.io/rhdm/lab05.html#/" target="_blank"&gt;lab 5 get hands-on creating guided rules&lt;/a&gt; in Red Hat Decision Manager:&lt;br /&gt;&lt;br /&gt;&lt;div align="center"&gt;&lt;iframe allowfullscreen="" frameborder="0" height="380" marginheight="0" marginwidth="0" scrolling="no" src="https://bpmworkshop.gitlab.io/rhdm/lab05.html#/" style="border-width: 1px; border: 1px solid #ccc; margin-bottom: 5px; max-width: 100%;" width="660"&gt;&lt;/iframe&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;Next up in this workshop, create technical rules (DRL).&lt;br /&gt;&lt;br /&gt;For more beginners guide workshops &lt;a href="https://bpmworkshop.gitlab.io/#/" target="_blank"&gt;please explore here&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=2U3VPYqs_6w:RCIsaiHidG0:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=2U3VPYqs_6w:RCIsaiHidG0:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=2U3VPYqs_6w:RCIsaiHidG0:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=2U3VPYqs_6w:RCIsaiHidG0:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=2U3VPYqs_6w:RCIsaiHidG0:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=2U3VPYqs_6w:RCIsaiHidG0:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=2U3VPYqs_6w:RCIsaiHidG0:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=2U3VPYqs_6w:RCIsaiHidG0:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=2U3VPYqs_6w:RCIsaiHidG0:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=2U3VPYqs_6w:RCIsaiHidG0:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=2U3VPYqs_6w:RCIsaiHidG0:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/2U3VPYqs_6w" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/lHYvcCVvXis" height="1" width="1" alt=""/&gt;</content><summary>With the release of Red Hat Decision Manager 7.3 I've started updating my free online workshop, a beginners guide to building an online retail web shop. The previous article covered creating a domain specific language or DSL for your online retail web shop.. This update is the for the fifth lab in this workshop, with more to follow. Learn how to create guided rules with Red Hat Decision Manager. B...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2019-07-22T05:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/2U3VPYqs_6w/beginners-guide-building-an-online-retail-web-shop-workshop-guided-rules.html</feedburner:origLink></entry><entry><title>This week in JBoss (July 18th 2019) - Big Purple!</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/sPMEaxZP7dE/this-week-in-jboss-july-18th-2019-big-purple" /><category term="debezium" scheme="searchisko:content:tags" /><category term="Drools" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_weeklyeditorial" scheme="searchisko:content:tags" /><category term="hybrid-cloud" scheme="searchisko:content:tags" /><category term="ibm" scheme="searchisko:content:tags" /><category term="infinispan" scheme="searchisko:content:tags" /><category term="jboss-tools" scheme="searchisko:content:tags" /><category term="jBPM" scheme="searchisko:content:tags" /><category term="jgroups" scheme="searchisko:content:tags" /><category term="Kafka" scheme="searchisko:content:tags" /><category term="quarkus" scheme="searchisko:content:tags" /><author><name>Romain Pelisse</name></author><id>searchisko:content:id:jbossorg_blog-this_week_in_jboss_july_18th_2019_big_purple</id><updated>2019-07-19T07:41:32Z</updated><published>2019-07-19T07:41:32Z</published><content type="html">&lt;!-- [DocumentBodyStart:88cf09c0-e954-45c1-b3dd-eb027d99761c] --&gt;&lt;div class="jive-rendered-content"&gt;&lt;p&gt;&lt;em&gt;Welcome to a new installment of the JBoss Weekly Editorial! (Which is now released every two weeks, but let&amp;#8217;s not get sidetrack by that). The biggest news is for sure IBM and Mark Little have commented on that on his blog, but don&amp;#8217;t worry, there is also plenty of more technical or community-related news for you!&lt;/em&gt;&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Big Purple&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;The times, they are changing &lt;span aria-label="Happy" class="emoticon_happy emoticon-inline" style="height:16px;width:16px;"&gt;&lt;/span&gt;! As you must be aware by now, IBM bought Red Hat, as announced a few months ago. The purchase being finalized, there is now an ocean of questions (and, to be honest, opportunities for collaboration) arising. I wish we could have all the answers to your question, but, hopefully, &lt;a class="jive-link-blog-small" data-containerId="1427" data-containerType="37" data-objectId="6307" data-objectType="38" href="https://developer.jboss.org/blogs/mark.little/2019/07/10/welcome-ibm-to-the-red-hatjboss-family"&gt;this blog entry from Mark Little&lt;/a&gt;, we still answer some for you.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Techbytes&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;A few interesting articles have been released in the past week. First is about &lt;a class="jive-link-external-small" href="http://blog.athico.com/2019/07/kogito-ergo-rules-part-1-bringing.html?utm_source=feedburner&amp;amp;utm_medium=feed&amp;amp;utm_campaign=Feed%3A+DroolsAtom+%28Drools+-+Atom%29" rel="nofollow"&gt;Drools &amp;amp; jBPM: Kogito, ergo Rules &amp;mdash; Part 1: Bringing Drools Further &lt;/a&gt;. It is to be noted that the Kogito project aims at providing the best possible cloud integration to both Drools &amp;amp; jPBM, so if you have any interest in both topics, you should certainly check this one out!&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;The next one is very exciting. I've been a fan of JGroups since I've been introduced to the frameworks back in 2005 (gosh, I'm not getting younger).&amp;#160; It has been the backbone of the JBoss Clustering solution for decades now, but the framework was also often leverage in cutting project. And now that Bela Ban released this article on&lt;a class="jive-link-external-small" href="http://belaban.blogspot.com/2019/07/compiling-jgroups-to-native-code-with.html" rel="nofollow"&gt; Compiling JGroups to native code with Quarkus/GraalVM&lt;/a&gt;, I'm sure the possibilities unlocked with both Quarkus and JGroups are going to be endless!&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Still not enough? Still craving for more technological babble to impress your friends at dinner parties? Well, then take a look at this one: &lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2019/07/10/developer-preview-of-debezium-apache-kafka-connectors-for-change-data-capture-cdc/" rel="nofollow"&gt;Debezium Apache Kafka connectors for Change Data Capture (CDC)&lt;/a&gt;. &lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Java Tooling&lt;/h2&gt;&lt;h2&gt;&lt;/h2&gt;&lt;p&gt;Despite the decade-long rumors of Java upcoming death, the corpse still appears to be moving and thriving. The zombie language even appears to learn new tricks or rather get new swagger, as illustrated by the &lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2019/07/17/devnation-live-17-million-downloads-of-visual-studio-code-java-extension/" rel="nofollow"&gt;17-million downloads of Visual Studio Code Java extension.&lt;/a&gt;&lt;/p&gt;&lt;p&gt;But rest assure, if you are still not feeling comfortable coding Java in Visual Code, you can &lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2019/07/12/announcing-red-hat-codeready-studio-12-12-0-ga-and-jboss-tools-4-12-0-final-for-eclipse-2019-06/" rel="nofollow"&gt;get started with Red Hat CodeReady Studio 12.12.0.GA and JBoss Tools 4.12.0.Final for Eclipse.&lt;/a&gt;&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Evangelist's Corner&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;For the summer (well, summer in the northern hemisphere), Eric D. Schabell re-released an updated version of his classic &lt;a class="jive-link-external-small" href="http://www.schabell.org/2019/07/3-more-pitfalls-everyone-should-avoid-with-hybrid-multicloud-slides.html?utm_source=feedburner&amp;amp;utm_medium=feed&amp;amp;utm_campaign=Feed%3A+schabell%2Fjboss+%28Eric+D.+Schabell+-+JBoss%29" rel="nofollow"&gt;3 More Pitfalls Everyone Should Avoid with Hybrid Multicloud (slides)&lt;/a&gt;. If you missed it the last time around, you have another chance to check it out! He also released a new &lt;a class="jive-link-external-small" href="http://www.schabell.org/2019/07/beginners-guide-building-an-online-retail-web-shop-workshop-domain-model.html?utm_source=feedburner&amp;amp;utm_medium=feed&amp;amp;utm_campaign=Feed%3A+schabell%2Fjboss+%28Eric+D.+Schabell+-+JBoss%29" rel="nofollow"&gt;Beginners Guide on "Building an Online Retail Web Shop Workshop (Domain Model)"&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;&lt;/h2&gt;&lt;h2&gt;Releases, releases, releases... Infinispan version!&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;The Infinispan project has been quite busy in the last days. They released a new version of the core project, along with a new version of the Infinispan Operator. Take a look!&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a class="jive-link-external-small" href="https://blog.infinispan.org/2019/07/infinispan-1000beta4.html?utm_source=feedburner&amp;amp;utm_medium=feed&amp;amp;utm_campaign=Feed:+Infinispan+(Infinispan)" rel="nofollow"&gt;Infinispan: Infinispan 10.0.0.Beta4&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="jive-link-external-small" href="https://blog.infinispan.org/2019/07/infinispan-operator-030-expands.html?utm_source=feedburner&amp;amp;utm_medium=feed&amp;amp;utm_campaign=Feed:+Infinispan+(Infinispan)" rel="nofollow"&gt;Infinispan: Infinispan Operator 0.3.0 expands container and security configuration!&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;!-- [DocumentBodyEnd:88cf09c0-e954-45c1-b3dd-eb027d99761c] --&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/sPMEaxZP7dE" height="1" width="1" alt=""/&gt;</content><summary>Welcome to a new installment of the JBoss Weekly Editorial! (Which is now released every two weeks, but let’s not get sidetrack by that). The biggest news is for sure IBM and Mark Little have commented on that on his blog, but don’t worry, there is also plenty of more technical or community-related news for you!   Big Purple   The times, they are changing ! As you must be aware by now, IBM bought ...</summary><dc:creator>Romain Pelisse</dc:creator><dc:date>2019-07-19T07:41:32Z</dc:date><feedburner:origLink>https://developer.jboss.org/blogs/weekly-editorial/2019/07/19/this-week-in-jboss-july-18th-2019-big-purple</feedburner:origLink></entry><entry><title>Kubernetes: The retro-style, Wild West video game</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/9NmVDnhIDCc/" /><category term="Feature" /><category term="Kubernetes" /><category term="OpenShift" /><category term="kubernetes" /><category term="Red Hat OpenShift" /><category term="video" /><author><name>Editorial Team</name></author><id>https://developers.redhat.com/blog/?p=612067</id><updated>2019-07-19T07:00:03Z</updated><published>2019-07-19T07:00:03Z</published><content type="html">&lt;p&gt;The &lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt; API is amazing, and not only are we going to break it down and show you how to wield this mighty weapon, but we will do it while building a video game, live, on stage. As a matter of fact, you get to play along.&lt;span id="more-612067"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;Grant Shipley, Director &amp;#8211; OpenShift, Red Hat, wanted to create a game to help people learn the Kubernetes API, but he thought this was out of his reach until he encountered the JavaScript Phaser Game Engine and the Kubernetes API.&lt;/p&gt; &lt;p&gt;In this keynote presentation from &lt;a href="https://www.lfasiallc.com/events/kubecon-cloudnativecon-china-2019/"&gt;KubeCon China 2019&lt;/a&gt;, Shipley will walk you through the code he wrote to create a retro-style, Wild West shooter that manipulates Kubernetes resources as part of the game. At the end, you should have enough knowledge to gamify Kubernetes or to at least automate it for real-world use cases.&lt;/p&gt; &lt;p&gt;Watch the complete presentation:&lt;/p&gt; &lt;p&gt;&lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/BFoeq16ojU4?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;p&gt;You can find the code&lt;a href="https://github.com/gshipley/Wild-West-Frontend"&gt; on GitHub.&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F19%2Fkubernetes-the-video-game-with-grant-shipley%2F&amp;#38;linkname=Kubernetes%3A%20The%20retro-style%2C%20Wild%20West%20video%20game" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F19%2Fkubernetes-the-video-game-with-grant-shipley%2F&amp;#38;linkname=Kubernetes%3A%20The%20retro-style%2C%20Wild%20West%20video%20game" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F19%2Fkubernetes-the-video-game-with-grant-shipley%2F&amp;#38;linkname=Kubernetes%3A%20The%20retro-style%2C%20Wild%20West%20video%20game" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F19%2Fkubernetes-the-video-game-with-grant-shipley%2F&amp;#38;linkname=Kubernetes%3A%20The%20retro-style%2C%20Wild%20West%20video%20game" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F19%2Fkubernetes-the-video-game-with-grant-shipley%2F&amp;#38;linkname=Kubernetes%3A%20The%20retro-style%2C%20Wild%20West%20video%20game" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F19%2Fkubernetes-the-video-game-with-grant-shipley%2F&amp;#38;linkname=Kubernetes%3A%20The%20retro-style%2C%20Wild%20West%20video%20game" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F19%2Fkubernetes-the-video-game-with-grant-shipley%2F&amp;#38;linkname=Kubernetes%3A%20The%20retro-style%2C%20Wild%20West%20video%20game" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F19%2Fkubernetes-the-video-game-with-grant-shipley%2F&amp;#038;title=Kubernetes%3A%20The%20retro-style%2C%20Wild%20West%20video%20game" data-a2a-url="https://developers.redhat.com/blog/2019/07/19/kubernetes-the-video-game-with-grant-shipley/" data-a2a-title="Kubernetes: The retro-style, Wild West video game"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/19/kubernetes-the-video-game-with-grant-shipley/"&gt;Kubernetes: The retro-style, Wild West video game&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/9NmVDnhIDCc" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;The Kubernetes API is amazing, and not only are we going to break it down and show you how to wield this mighty weapon, but we will do it while building a video game, live, on stage. As a matter of fact, you get to play along. Grant Shipley, Director &amp;#8211; OpenShift, Red Hat, wanted [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/19/kubernetes-the-video-game-with-grant-shipley/"&gt;Kubernetes: The retro-style, Wild West video game&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/07/19/kubernetes-the-video-game-with-grant-shipley/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">3</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">612067</post-id><dc:creator>Editorial Team</dc:creator><dc:date>2019-07-19T07:00:03Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/07/19/kubernetes-the-video-game-with-grant-shipley/</feedburner:origLink></entry><entry><title>Getting started with Tekton on Red Hat OpenShift</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/hOLLGZ5FEBk/" /><category term="Modern App Dev" /><category term="OpenShift" /><category term="Programming Languages" /><category term="Developer Tools" /><category term="OpenShift Container Platform" /><author><name>Huub Daems</name></author><id>https://developers.redhat.com/blog/?p=611357</id><updated>2019-07-19T06:59:06Z</updated><published>2019-07-19T06:59:06Z</published><content type="html">&lt;p&gt;I recently heard about &lt;a href="https://tekton.dev/" target="_blank" rel="noopener noreferrer"&gt;Tekton&lt;/a&gt; as an alternative for Jenkins on Red Hat OpenShift. What got my attention was that Tekton uses Operators as building blocks, and Operators are something I am also interested in. I don&amp;#8217;t want to get ahead of myself, though; so we&amp;#8217;ll start with installing Tekton on Red Hat OpenShift. Installing on Kubernetes is also possible, but for now the focus is on OpenShift.&lt;/p&gt; &lt;p&gt;&lt;span id="more-611357"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;To install Tekton, you need to be cluster-admin on a Red Hat OpenShift cluster. The reason for that is that the Controller must run with &lt;code&gt;anyuid&lt;/code&gt;. Just have an OpenShift or Minishift cluster at your fingertips on which you can be cluster-admin.&lt;/p&gt; &lt;p&gt;We are going to use a dedicated project to install the Tekton Operators in:&lt;/p&gt; &lt;pre&gt;oc new-project tekton-pipelines --display-name='Tekton Pipelines' oc adm policy add-scc-to-user anyuid -z tekton-pipelines-controller oc apply --filename https://storage.googleapis.com/tekton-releases/latest/release.yaml&lt;/pre&gt; &lt;p&gt;This creates two deployments in the tekton-pipelines project, named &lt;code&gt;tekton-pipelines-controller&lt;/code&gt; and &lt;code&gt;tekton-pipelines-webhook&lt;/code&gt;. It is fast to start up, but to see if the pods are running, use the following &lt;code&gt;oc&lt;/code&gt; command and wait for the &amp;#8216;Running&amp;#8217; status:&lt;/p&gt; &lt;pre&gt;oc get pods --namespace tekton-pipelines --watch&lt;/pre&gt; &lt;p&gt;Use CTRL + C to exit watch mode.&lt;/p&gt; &lt;p&gt;Now that Tekton is running, we need to define a Task with steps saying what to do. We also need a TaskRun definition saying which Task to run. We need two yaml files for that. How the files are named does not really matter, but I am using the convention to end them with &lt;code&gt;-task.yaml&lt;/code&gt; and &lt;code&gt;-task-run.yaml&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;A Task definition file named &lt;code&gt;echo-hello-world-task.yaml&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;apiVersion: tekton.dev/v1alpha1 kind: Task metadata: name: echo-hello-world-task spec: steps: - name: echo image: ubuntu command: - echo args: - "hello world"&lt;/pre&gt; &lt;p&gt;And a TaskRun definition file named &lt;code&gt;echo-hello-world-task-run.yaml&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;apiVersion: tekton.dev/v1alpha1 kind: TaskRun metadata: name: echo-hello-world-task-run spec: taskRef: name: echo-hello-world-task&lt;/pre&gt; &lt;p&gt;We will apply the two files with the following commands:&lt;/p&gt; &lt;pre&gt;oc apply -f echo-hello-world-task.yaml oc apply -f echo-hello-world-task-run.yaml&lt;/pre&gt; &lt;p&gt;As soon as both files are applied, they will get directly executed. To get the output of the TaskRun, use the following command:&lt;/p&gt; &lt;pre&gt;oc get taskruns/echo-hello-world-task-run -o yaml&lt;/pre&gt; &lt;pre&gt;Look through the output and search for:&lt;/pre&gt; &lt;pre&gt;status: conditions: - lastTransitionTime: 2019-07-08T18:48:15Z status: "True" type: Succeeded&lt;/pre&gt; &lt;p&gt;If it looks almost the same as above, you have executed the first part of what will become a complete Tekton pipeline.&lt;/p&gt; &lt;p&gt;Stay tuned for the next episode in which we create our first pipeline.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F19%2Fgetting-started-with-tekton-on-red-hat-openshift%2F&amp;#38;linkname=Getting%20started%20with%20Tekton%20on%20Red%20Hat%20OpenShift" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F19%2Fgetting-started-with-tekton-on-red-hat-openshift%2F&amp;#38;linkname=Getting%20started%20with%20Tekton%20on%20Red%20Hat%20OpenShift" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F19%2Fgetting-started-with-tekton-on-red-hat-openshift%2F&amp;#38;linkname=Getting%20started%20with%20Tekton%20on%20Red%20Hat%20OpenShift" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F19%2Fgetting-started-with-tekton-on-red-hat-openshift%2F&amp;#38;linkname=Getting%20started%20with%20Tekton%20on%20Red%20Hat%20OpenShift" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F19%2Fgetting-started-with-tekton-on-red-hat-openshift%2F&amp;#38;linkname=Getting%20started%20with%20Tekton%20on%20Red%20Hat%20OpenShift" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F19%2Fgetting-started-with-tekton-on-red-hat-openshift%2F&amp;#38;linkname=Getting%20started%20with%20Tekton%20on%20Red%20Hat%20OpenShift" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F19%2Fgetting-started-with-tekton-on-red-hat-openshift%2F&amp;#38;linkname=Getting%20started%20with%20Tekton%20on%20Red%20Hat%20OpenShift" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F19%2Fgetting-started-with-tekton-on-red-hat-openshift%2F&amp;#038;title=Getting%20started%20with%20Tekton%20on%20Red%20Hat%20OpenShift" data-a2a-url="https://developers.redhat.com/blog/2019/07/19/getting-started-with-tekton-on-red-hat-openshift/" data-a2a-title="Getting started with Tekton on Red Hat OpenShift"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/19/getting-started-with-tekton-on-red-hat-openshift/"&gt;Getting started with Tekton on Red Hat OpenShift&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/hOLLGZ5FEBk" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;I recently heard about Tekton as an alternative for Jenkins on Red Hat OpenShift. What got my attention was that Tekton uses Operators as building blocks, and Operators are something I am also interested in. I don&amp;#8217;t want to get ahead of myself, though; so we&amp;#8217;ll start with installing Tekton on Red Hat OpenShift. Installing [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/19/getting-started-with-tekton-on-red-hat-openshift/"&gt;Getting started with Tekton on Red Hat OpenShift&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/07/19/getting-started-with-tekton-on-red-hat-openshift/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">611357</post-id><dc:creator>Huub Daems</dc:creator><dc:date>2019-07-19T06:59:06Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/07/19/getting-started-with-tekton-on-red-hat-openshift/</feedburner:origLink></entry><entry><title>Kogito, ergo Rules — Part 1: Bringing Drools Further</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/PUx7MZFj_kU/kogito-ergo-rules-part-1-bringing.html" /><category term="actors" scheme="searchisko:content:tags" /><category term="AI" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="Drools" scheme="searchisko:content:tags" /><category term="DroolsAI" scheme="searchisko:content:tags" /><category term="feed_group_name_drools" scheme="searchisko:content:tags" /><category term="feed_name_drools" scheme="searchisko:content:tags" /><category term="jBPM" scheme="searchisko:content:tags" /><category term="kogito" scheme="searchisko:content:tags" /><category term="microservices" scheme="searchisko:content:tags" /><category term="serverless" scheme="searchisko:content:tags" /><category term="units" scheme="searchisko:content:tags" /><author><name>Edoardo Vacchi</name></author><id>searchisko:content:id:jbossorg_blog-kogito_ergo_rules_part_1_bringing_drools_further</id><updated>2019-07-18T11:51:54Z</updated><published>2019-07-18T11:51:00Z</published><content type="html">&lt;div align="left" style="margin-bottom: 0in; orphans: 2; widows: 2;"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://raw.githubusercontent.com/kiegroup/kogito-runtimes/master/docsimg/kogito.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="228" data-original-width="800" height="180" src="https://raw.githubusercontent.com/kiegroup/kogito-runtimes/master/docsimg/kogito.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;The Kogito initiative is our pledge to bring our business automation suite to the cloud and the larger Kubernetes ecosystem. But what does this mean for our beloved rule engine, Drools? In this post we introduce modular rule bases using &lt;b&gt;rule units&lt;/b&gt;:&lt;b&gt; &lt;/b&gt;a feature that has been &lt;i&gt;experimental&lt;/i&gt; for a while in Drools 7, but that will be &lt;i&gt;instrumental&lt;/i&gt; for Kogito, where it will play a much bigger role. This is the first post of a series where we will give you an overview of this feature.&lt;/span&gt;&lt;/div&gt;&lt;span style="font-family: inherit;"&gt;&lt;/span&gt;&lt;h2 class="western"&gt;&lt;span style="font-family: inherit;"&gt;&lt;a href="https://draft.blogger.com/u/2/null" name="_vimpptao8nz"&gt;&lt;/a&gt;Bringing Drools Further &lt;/span&gt;&lt;/h2&gt;&lt;span style="font-family: inherit;"&gt;&lt;/span&gt;&lt;div align="left" style="margin-bottom: 0in; orphans: 2; widows: 2;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;b&gt;Drools&lt;/b&gt;is our state-of-the-art, high-performance, feature-rich open source &lt;b&gt;rule engine&lt;/b&gt;. People love it because it is a &lt;i&gt;swiss-army knife&lt;/i&gt; to the many problems that can be solved using rule-based artificial intelligence. But as the computer programming landscape evolves, we need to think of ways to bring further Drools as well. As you may already know, &lt;a href="https://github.com/kiegroup/kogito-runtimes/"&gt;Kogito&lt;/a&gt; is our effort to make Drools and jBPM really cloud-native, and well-suited for serverless deployments: we are embracing the &lt;a href="https://quarkus.io/"&gt;Quarkus&lt;/a&gt; framework and &lt;a href="https://www.graalvm.org/"&gt;GraalVM&lt;/a&gt;’s native binary compilation for super-fast startup times and low memory footprint; but we are not stopping there.&lt;/span&gt;&lt;/div&gt;&lt;span style="font-family: inherit;"&gt;&lt;/span&gt;&lt;div align="left" style="margin-bottom: 0in; orphans: 2; widows: 2;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt; &lt;/div&gt;&lt;span style="font-family: inherit;"&gt;&lt;/span&gt;&lt;div align="left" style="margin-bottom: 0in; orphans: 2; widows: 2;"&gt;&lt;span style="font-family: inherit;"&gt;The way we want to bring further Drools evolution is &lt;b&gt;twofold&lt;/b&gt;: on the one hand, we want to make our programming model &lt;i&gt;easier to reason about&lt;/i&gt;, by providing better ways to define boundaries in a rule base with a better concept of &lt;b&gt;module; &lt;/b&gt;on the other hand, the concept of modular programming dates back at least to the 1970s and to &lt;a href="https://dl.acm.org/citation.cfm?id=361623"&gt;&lt;span style="color: #1155cc;"&gt;&lt;u&gt;Parnas’ original seminal paper&lt;/u&gt;&lt;/span&gt;&lt;/a&gt;. Needless to say, if our contribution stopped there, we would be bringing nothing new to the plate. In the last few years, computing has evolved, slowly but steadily embracing the &lt;b&gt;multicore and distributed revolution&lt;/b&gt;; yet, to this day, many general-purpose programming languages do not really make it simple to write parallel or distributed programs. rule-based programming system we have the chance to propose &lt;b&gt;something different&lt;/b&gt;: a rule engine that is &lt;i&gt;great&lt;/i&gt; when &lt;i&gt;stand-alone&lt;/i&gt;, but &lt;b&gt;outstanding&lt;/b&gt; in the &lt;b&gt;cloud&lt;/b&gt;.&lt;/span&gt;&lt;/div&gt;&lt;span style="font-family: inherit;"&gt;&lt;/span&gt;&lt;div align="left" style="margin-bottom: 0in; orphans: 2; widows: 2;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt; &lt;/div&gt;&lt;span style="font-family: inherit;"&gt;&lt;/span&gt;&lt;div align="left" style="margin-bottom: 0in; orphans: 2; widows: 2;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;b&gt;Modular Rule Bases.&lt;/b&gt; As you already know, Drools provides a convenient way to partition set of rules into &lt;i&gt;knowledge bases&lt;/i&gt;. Such knowledge bases can be &lt;i&gt;composed&lt;/i&gt; together, yielding larger sets of rules. When a knowledge base is instantiated (the so-called &lt;i&gt;session&lt;/i&gt;), rules are put together in the same execution environment (the &lt;i&gt;production memory&lt;/i&gt;), and values (the &lt;i&gt;facts&lt;/i&gt;) are all inserted together in the same &lt;i&gt;working memory&lt;/i&gt;.&lt;/span&gt;&lt;/div&gt;&lt;span style="font-family: inherit;"&gt;&lt;/span&gt;&lt;div align="left" style="margin-bottom: 0in; orphans: 2; widows: 2;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt; &lt;/div&gt;&lt;span style="font-family: inherit;"&gt;&lt;/span&gt;&lt;div align="left" style="margin-bottom: 0in; orphans: 2; widows: 2;"&gt;&lt;span style="font-family: inherit;"&gt;This model is &lt;i&gt;very simple and powerful&lt;/i&gt; but in some senses it is also &lt;i&gt;very limited&lt;/i&gt;. It is very simple, because, as a user of the rule base, you just worry about your data: the values are inserted into the working memory, and the engine does its magic. It is very powerful, because, as a rule author, you can rely upon the rules you have written to realize complex flows of reasoning, without worrying about how and when they will trigger. &lt;/span&gt;&lt;/div&gt;&lt;span style="font-family: inherit;"&gt;&lt;/span&gt;&lt;div align="left" style="margin-bottom: 0in; orphans: 2; widows: 2;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt; &lt;/div&gt;&lt;span style="font-family: inherit;"&gt;&lt;/span&gt;&lt;div align="left" style="margin-bottom: 0in; orphans: 2; widows: 2;"&gt;&lt;span style="font-family: inherit;"&gt;At the same time, such an execution model lacks all of the principles, that over the years we have been learning are good programming practice. For instance, there is no proper notion of a &lt;b&gt;module&lt;/b&gt;: it is not possible to perfectly isolate one rule from another, or to properly partition the working memory. As the rule base scales up in complexity, it may become harder to understand which rules trigger and why. In some senses, it is as if you were programming in an odd world where proper encapsulation of state does not exist, as if years of programming language evolution had not happened. &lt;/span&gt;&lt;/div&gt;&lt;span style="font-family: inherit;"&gt;&lt;/span&gt;&lt;div align="left" style="margin-bottom: 0in; orphans: 2; widows: 2;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt; &lt;/div&gt;&lt;span style="font-family: inherit;"&gt;&lt;/span&gt;&lt;div align="left" style="margin-bottom: 0in; orphans: 2; widows: 2;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;b&gt;Object-Oriented Programming.&lt;/b&gt; The term object-oriented programming has been overloaded over the years to mean a lot of different things; it has to do both with &lt;i&gt;inheritance&lt;/i&gt;, with &lt;i&gt;encapsulation of state&lt;/i&gt;, with &lt;i&gt;code reuse&lt;/i&gt;, with &lt;i&gt;polymorphism&lt;/i&gt;. All these terms get often confused, but they are not really related: you can reuse code without inheritance, you can encapsulate state without objects, you can write polymorphic code without classes. Very recent, imperative programming languages such as Go and Rust do not come with proper classes, yet they support a form of object-orientation; there is even &lt;a href="https://www.youtube.com/watch?v=xcpSLRpOMJM"&gt;&lt;span style="color: #1155cc;"&gt;&lt;u&gt;a beautiful 2015 talk from C++’s dad, Bjarne Stroustrup, showing how his child supports object-orientation without inheritance&lt;/u&gt;&lt;/span&gt;&lt;/a&gt;.&lt;/span&gt;&lt;/div&gt;&lt;span style="font-family: inherit;"&gt;&lt;/span&gt;&lt;div align="left" style="margin-bottom: 0in; orphans: 2; widows: 2;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt; &lt;/div&gt;&lt;span style="font-family: inherit;"&gt;&lt;/span&gt;&lt;div align="left" style="margin-bottom: 0in; orphans: 2; widows: 2;"&gt;&lt;span style="font-family: inherit;"&gt;Alan Kay, who fathered the term in his Smalltalk days at Xerox, &lt;a href="https://www.youtube.com/watch?v=oKg1hTOQXoY"&gt;&lt;span style="color: #1155cc;"&gt;&lt;u&gt;in his inspiring lecture at OOPSLA 1997 said «I made up the term "object-oriented", and I can tell you I did not have C++ in mind»&lt;/u&gt;&lt;/span&gt;&lt;/a&gt;. In fact, the idea of&lt;b&gt; objects&lt;/b&gt; that Alan Kay pioneered was more similar to the concept of &lt;b&gt;actors&lt;/b&gt; and &lt;b&gt;microservices&lt;/b&gt;. In &lt;i&gt;proper&lt;/i&gt; object-oriented programming, objects encapsulate their internal state and expose their behavior by exchanging &lt;i&gt;messages&lt;/i&gt; (usually called methods) with the external world. &lt;/span&gt;&lt;/div&gt;&lt;span style="font-family: inherit;"&gt;&lt;/span&gt;&lt;div align="left" style="margin-bottom: 0in; orphans: 2; widows: 2;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt; &lt;/div&gt;&lt;span style="font-family: inherit;"&gt;&lt;/span&gt;&lt;div align="left" style="margin-bottom: 0in; orphans: 2; widows: 2;"&gt;&lt;span style="font-family: inherit;"&gt;Today actor systems have seen a renaissance, message buses are very central to what today we call &lt;i&gt;reactive programming&lt;/i&gt;, microservices are almost given for granted. So, we wondered, what would it mean for Drools to become a first-class citizen of this new programming landscape?&lt;/span&gt;&lt;/div&gt;&lt;span style="font-family: inherit;"&gt;&lt;/span&gt;&lt;h2 class="western"&gt;&lt;span style="font-family: inherit;"&gt;&lt;a href="https://draft.blogger.com/u/2/null" name="_h34vfy931cyy"&gt;&lt;/a&gt;Kogito, ergo Cloud&lt;/span&gt;&lt;/h2&gt;&lt;span style="font-family: inherit;"&gt;&lt;/span&gt;&lt;div align="left" style="margin-bottom: 0in; orphans: 2; widows: 2;"&gt;&lt;span style="font-family: inherit;"&gt;In the next post we will see our take on rule-based, modular programming, using &lt;b&gt;rule units&lt;/b&gt;. Rule units will provide an alternative to plain knowledge base composition and an extended model of execution. We believe that rule units will make room for a wider spectrum of use cases, including &lt;b&gt;parallel&lt;/b&gt; and &lt;b&gt;distributed&lt;/b&gt;architectures. Stay tuned to read how they fit in the Kogito story, and the exciting possibilities that they may open for the future of our automation platform.&lt;/span&gt;&lt;/div&gt;&lt;span style="font-family: inherit;"&gt;&lt;/span&gt;&lt;div align="left" style="margin-bottom: 0in; orphans: 2; widows: 2;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt; &lt;/div&gt;&lt;span style="font-family: inherit;"&gt;&lt;/span&gt;&lt;div align="left" style="margin-bottom: 0in; orphans: 2; widows: 2;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt; &lt;/div&gt;&lt;span style="font-family: inherit;"&gt;&lt;/span&gt;&lt;div align="left" style="margin-bottom: 0in; orphans: 2; widows: 2;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt; &lt;/div&gt;&lt;span style="font-family: inherit;"&gt; &lt;/span&gt;&lt;style type="text/css"&gt;&lt;span style="font-family: inherit;"&gt;h3 { margin-top: 0.22in; margin-bottom: 0.06in; direction: ltr; color: rgb(67, 67, 67); line-height: 100%; text-align: left; break-inside: avoid; background: transparent none repeat scroll 0% 0%; break-after: avoid; }h3.western { font-size: 14pt; font-weight: normal; }h3.cjk { font-size: 14pt; font-weight: normal; }h3.ctl { font-size: 14pt; }h2 { margin-top: 0.25in; margin-bottom: 0.08in; direction: ltr; line-height: 100%; text-align: left; break-inside: avoid; background: transparent none repeat scroll 0% 0%; break-after: avoid; }h2.western { font-size: 16pt; font-weight: normal; }h2.cjk { font-size: 16pt; font-weight: normal; }h2.ctl { font-size: 16pt; }p { margin-bottom: 0.1in; line-height: 115%; background: transparent none repeat scroll 0% 0%; }a:link { color: rgb(0, 0, 128); text-decoration: underline; }&lt;/span&gt;&lt;/style&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=SnbdqSeY9Xw:-7-HXsqYT5M:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=SnbdqSeY9Xw:-7-HXsqYT5M:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?i=SnbdqSeY9Xw:-7-HXsqYT5M:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=SnbdqSeY9Xw:-7-HXsqYT5M:dnMXMwOfBR0"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?d=dnMXMwOfBR0" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=SnbdqSeY9Xw:-7-HXsqYT5M:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?i=SnbdqSeY9Xw:-7-HXsqYT5M:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=SnbdqSeY9Xw:-7-HXsqYT5M:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?i=SnbdqSeY9Xw:-7-HXsqYT5M:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=SnbdqSeY9Xw:-7-HXsqYT5M:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=SnbdqSeY9Xw:-7-HXsqYT5M:jWeZv7XsJd0"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?d=jWeZv7XsJd0" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/DroolsAtom/~4/SnbdqSeY9Xw" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/PUx7MZFj_kU" height="1" width="1" alt=""/&gt;</content><summary>The Kogito initiative is our pledge to bring our business automation suite to the cloud and the larger Kubernetes ecosystem. But what does this mean for our beloved rule engine, Drools? In this post we introduce modular rule bases using rule units: a feature that has been experimental for a while in Drools 7, but that will be instrumental for Kogito, where it will play a much bigger role. This is ...</summary><dc:creator>Edoardo Vacchi</dc:creator><dc:date>2019-07-18T11:51:00Z</dc:date><feedburner:origLink>http://feeds.athico.com/~r/DroolsAtom/~3/SnbdqSeY9Xw/kogito-ergo-rules-part-1-bringing.html</feedburner:origLink></entry></feed>
